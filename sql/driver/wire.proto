// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Vivek Menezes (vivek@cockroachlabs.com)

syntax = "proto2";
package cockroach.driver;
option go_package = "driver";

import "cockroach/proto/api.proto";
import "cockroach/proto/errors.proto";
import "gogoproto/gogo.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// RequestHeader is supplied with every Request.
message RequestHeader {
  // User is the originating user.
  optional string user = 5 [(gogoproto.nullable) = false];
  // Session settings that were returned in the last response that
  // contained them, being reflected back to the server.
  optional bytes session = 1;
  // The transaction state returned in the previous response being
  // reflected back.
  optional bytes txn = 2;
  // CmdID is optionally specified for request idempotence
  // (i.e. replay protection).
  optional proto.ClientCmdID cmd_id = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "CmdID"];
}

// ResponseHeader is returned with every Response.
message ResponseHeader {
  // Error is non-nil if an error occurred.
  optional proto.Error error = 1;
  // Setting that should be reflected back in all subsequent requests.
  // When not set, future requests should continue to use existing settings.
  optional bytes session = 2;
  // Transaction message returned in a response; not to be interpreted by
  // the recipient and reflected in a subsequent request. When not set,
  // the subsequent request should not contain a transaction object.
  optional bytes txn = 3;
}

message Datum {
  option (gogoproto.goproto_stringer) = false;

  // Using explicit proto types provides convenient access when using json. If
  // we used a Kind+Bytes approach the json interface would involve base64
  // encoded data.
  option (gogoproto.onlyone) = true;
  oneof value {
    bool bool_val = 1;
    int64 int_val = 2;
    double float_val = 3;
    bytes bytes_val = 4;
    string string_val = 5;
  }

  // TODO(pmattis): How to add end-to-end checksumming? Just adding a checksum
  // field here is insufficient because we won't be storing the data above
  // directly in the database.
}

// A Result is a collection of rows.
message Result {
  // A Row is a collection of values representing a row in a result.
  message Row {
    repeated Datum values = 1 [(gogoproto.nullable) = false];
  }
  // The names of the columns returned in the result set in the order specified
  // in the SQL statement. The number of columns will equal the number of
  // values in each Row.
  repeated string columns = 1;
  // The rows in the result set.
  repeated Row rows = 2 [(gogoproto.nullable) = false];
}

// An SQL request to cockroach. A transaction can consist of multiple
// requests.
message Request {
  // Request header.
  optional RequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // SQL statement(s) to be serially executed by the server. Multiple
  // statements are passed as a single string separated by semicolons.
  optional string sql = 2 [(gogoproto.nullable) = false];
  // Parameters referred to in the above SQL statement(s) using "?".
  repeated Datum params = 3 [(gogoproto.nullable) = false];
}

message Response {
  optional ResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // The list of results. There is one result object per SQL statement in the
  // request.
  repeated Result results = 2 [(gogoproto.nullable) = false];
}
