// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/proto/internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ResponseCacheEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCacheEntry_reflection_ = NULL;
struct ResponseCacheEntryOneofInstance {
  const ::cockroach::proto::PutResponse* put_;
  const ::cockroach::proto::ConditionalPutResponse* conditional_put_;
  const ::cockroach::proto::IncrementResponse* increment_;
  const ::cockroach::proto::DeleteResponse* delete__;
  const ::cockroach::proto::DeleteRangeResponse* delete_range_;
  const ::cockroach::proto::EndTransactionResponse* end_transaction_;
  const ::cockroach::proto::HeartbeatTxnResponse* heartbeat_txn_;
  const ::cockroach::proto::GCResponse* gc_;
  const ::cockroach::proto::PushTxnResponse* push_txn_;
  const ::cockroach::proto::ResolveIntentResponse* resolve_intent_;
  const ::cockroach::proto::ResolveIntentRangeResponse* resolve_intent_range_;
  const ::cockroach::proto::MergeResponse* merge_;
  const ::cockroach::proto::TruncateLogResponse* truncate_log_;
  const ::cockroach::proto::LeaderLeaseResponse* leader_lease_;
  const ::cockroach::proto::BatchResponse* batch_;
}* ResponseCacheEntry_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RaftCommandUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCommandUnion_reflection_ = NULL;
struct RaftCommandUnionOneofInstance {
  const ::cockroach::proto::GetRequest* get_;
  const ::cockroach::proto::PutRequest* put_;
  const ::cockroach::proto::ConditionalPutRequest* conditional_put_;
  const ::cockroach::proto::IncrementRequest* increment_;
  const ::cockroach::proto::DeleteRequest* delete__;
  const ::cockroach::proto::DeleteRangeRequest* delete_range_;
  const ::cockroach::proto::ScanRequest* scan_;
  const ::cockroach::proto::EndTransactionRequest* end_transaction_;
  const ::cockroach::proto::RangeLookupRequest* range_lookup_;
  const ::cockroach::proto::HeartbeatTxnRequest* heartbeat_txn_;
  const ::cockroach::proto::GCRequest* gc_;
  const ::cockroach::proto::PushTxnRequest* push_txn_;
  const ::cockroach::proto::ResolveIntentRequest* resolve_intent_;
  const ::cockroach::proto::ResolveIntentRangeRequest* resolve_intent_range_;
  const ::cockroach::proto::MergeRequest* merge_response_;
  const ::cockroach::proto::TruncateLogRequest* truncate_log_;
  const ::cockroach::proto::LeaderLeaseRequest* lease_;
  const ::cockroach::proto::ReverseScanRequest* reverse_scan_;
  const ::cockroach::proto::BatchRequest* batch_;
}* RaftCommandUnion_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RaftCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTimeSeriesData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTimeSeriesData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTimeSeriesSample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTimeSeriesSample_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftTruncatedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftTruncatedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftSnapshotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftSnapshotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftSnapshotData_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftSnapshotData_KeyValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InternalValueType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto() {
  protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/proto/internal.proto");
  GOOGLE_CHECK(file != NULL);
  ResponseCacheEntry_descriptor_ = file->message_type(0);
  static const int ResponseCacheEntry_offsets_[16] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, conditional_put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, increment_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, delete__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, delete_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, end_transaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, heartbeat_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, gc_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, push_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, resolve_intent_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, resolve_intent_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, merge_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, truncate_log_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, leader_lease_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ResponseCacheEntry_default_oneof_instance_, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCacheEntry, value_),
  };
  ResponseCacheEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseCacheEntry_descriptor_,
      ResponseCacheEntry::default_instance_,
      ResponseCacheEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCacheEntry, _has_bits_[0]),
      -1,
      -1,
      ResponseCacheEntry_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCacheEntry, _oneof_case_[0]),
      sizeof(ResponseCacheEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCacheEntry, _internal_metadata_),
      -1);
  RaftCommandUnion_descriptor_ = file->message_type(1);
  static const int RaftCommandUnion_offsets_[20] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, get_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, conditional_put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, increment_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, delete__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, delete_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, end_transaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, range_lookup_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, heartbeat_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, gc_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, push_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, resolve_intent_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, resolve_intent_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, merge_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, truncate_log_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, lease_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, reverse_scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RaftCommandUnion_default_oneof_instance_, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommandUnion, value_),
  };
  RaftCommandUnion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftCommandUnion_descriptor_,
      RaftCommandUnion::default_instance_,
      RaftCommandUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommandUnion, _has_bits_[0]),
      -1,
      -1,
      RaftCommandUnion_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommandUnion, _oneof_case_[0]),
      sizeof(RaftCommandUnion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommandUnion, _internal_metadata_),
      -1);
  RaftCommand_descriptor_ = file->message_type(2);
  static const int RaftCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommand, range_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommand, origin_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommand, cmd_),
  };
  RaftCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftCommand_descriptor_,
      RaftCommand::default_instance_,
      RaftCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommand, _internal_metadata_),
      -1);
  RaftMessageRequest_descriptor_ = file->message_type(3);
  static const int RaftMessageRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, msg_),
  };
  RaftMessageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftMessageRequest_descriptor_,
      RaftMessageRequest::default_instance_,
      RaftMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftMessageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, _internal_metadata_),
      -1);
  RaftMessageResponse_descriptor_ = file->message_type(4);
  static const int RaftMessageResponse_offsets_[1] = {
  };
  RaftMessageResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftMessageResponse_descriptor_,
      RaftMessageResponse::default_instance_,
      RaftMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftMessageResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageResponse, _internal_metadata_),
      -1);
  InternalTimeSeriesData_descriptor_ = file->message_type(5);
  static const int InternalTimeSeriesData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, start_timestamp_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, sample_duration_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, samples_),
  };
  InternalTimeSeriesData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalTimeSeriesData_descriptor_,
      InternalTimeSeriesData::default_instance_,
      InternalTimeSeriesData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalTimeSeriesData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, _internal_metadata_),
      -1);
  InternalTimeSeriesSample_descriptor_ = file->message_type(6);
  static const int InternalTimeSeriesSample_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, min_),
  };
  InternalTimeSeriesSample_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalTimeSeriesSample_descriptor_,
      InternalTimeSeriesSample::default_instance_,
      InternalTimeSeriesSample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalTimeSeriesSample),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, _internal_metadata_),
      -1);
  RaftTruncatedState_descriptor_ = file->message_type(7);
  static const int RaftTruncatedState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, term_),
  };
  RaftTruncatedState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftTruncatedState_descriptor_,
      RaftTruncatedState::default_instance_,
      RaftTruncatedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftTruncatedState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _internal_metadata_),
      -1);
  RaftSnapshotData_descriptor_ = file->message_type(8);
  static const int RaftSnapshotData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, range_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, kv_),
  };
  RaftSnapshotData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftSnapshotData_descriptor_,
      RaftSnapshotData::default_instance_,
      RaftSnapshotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftSnapshotData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _internal_metadata_),
      -1);
  RaftSnapshotData_KeyValue_descriptor_ = RaftSnapshotData_descriptor_->nested_type(0);
  static const int RaftSnapshotData_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, value_),
  };
  RaftSnapshotData_KeyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftSnapshotData_KeyValue_descriptor_,
      RaftSnapshotData_KeyValue::default_instance_,
      RaftSnapshotData_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftSnapshotData_KeyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, _internal_metadata_),
      -1);
  InternalValueType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseCacheEntry_descriptor_, &ResponseCacheEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftCommandUnion_descriptor_, &RaftCommandUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftCommand_descriptor_, &RaftCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftMessageRequest_descriptor_, &RaftMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftMessageResponse_descriptor_, &RaftMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalTimeSeriesData_descriptor_, &InternalTimeSeriesData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalTimeSeriesSample_descriptor_, &InternalTimeSeriesSample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftTruncatedState_descriptor_, &RaftTruncatedState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftSnapshotData_descriptor_, &RaftSnapshotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftSnapshotData_KeyValue_descriptor_, &RaftSnapshotData_KeyValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto() {
  delete ResponseCacheEntry::default_instance_;
  delete ResponseCacheEntry_default_oneof_instance_;
  delete ResponseCacheEntry_reflection_;
  delete RaftCommandUnion::default_instance_;
  delete RaftCommandUnion_default_oneof_instance_;
  delete RaftCommandUnion_reflection_;
  delete RaftCommand::default_instance_;
  delete RaftCommand_reflection_;
  delete RaftMessageRequest::default_instance_;
  delete RaftMessageRequest_reflection_;
  delete RaftMessageResponse::default_instance_;
  delete RaftMessageResponse_reflection_;
  delete InternalTimeSeriesData::default_instance_;
  delete InternalTimeSeriesData_reflection_;
  delete InternalTimeSeriesSample::default_instance_;
  delete InternalTimeSeriesSample_reflection_;
  delete RaftTruncatedState::default_instance_;
  delete RaftTruncatedState_reflection_;
  delete RaftSnapshotData::default_instance_;
  delete RaftSnapshotData_reflection_;
  delete RaftSnapshotData_KeyValue::default_instance_;
  delete RaftSnapshotData_KeyValue_reflection_;
}

void protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fmetadata_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036cockroach/proto/internal.proto\022\017cockro"
    "ach.proto\032\031cockroach/proto/api.proto\032\036co"
    "ckroach/proto/metadata.proto\032\024gogoproto/"
    "gogo.proto\"\220\007\n\022ResponseCacheEntry\022+\n\003put"
    "\030\001 \001(\0132\034.cockroach.proto.PutResponseH\000\022B"
    "\n\017conditional_put\030\002 \001(\0132\'.cockroach.prot"
    "o.ConditionalPutResponseH\000\0227\n\tincrement\030"
    "\003 \001(\0132\".cockroach.proto.IncrementRespons"
    "eH\000\0221\n\006delete\030\004 \001(\0132\037.cockroach.proto.De"
    "leteResponseH\000\022<\n\014delete_range\030\005 \001(\0132$.c"
    "ockroach.proto.DeleteRangeResponseH\000\022B\n\017"
    "end_transaction\030\006 \001(\0132\'.cockroach.proto."
    "EndTransactionResponseH\000\022>\n\rheartbeat_tx"
    "n\030\007 \001(\0132%.cockroach.proto.HeartbeatTxnRe"
    "sponseH\000\022)\n\002gc\030\010 \001(\0132\033.cockroach.proto.G"
    "CResponseH\000\0224\n\010push_txn\030\t \001(\0132 .cockroac"
    "h.proto.PushTxnResponseH\000\022@\n\016resolve_int"
    "ent\030\n \001(\0132&.cockroach.proto.ResolveInten"
    "tResponseH\000\022K\n\024resolve_intent_range\030\013 \001("
    "\0132+.cockroach.proto.ResolveIntentRangeRe"
    "sponseH\000\022/\n\005merge\030\014 \001(\0132\036.cockroach.prot"
    "o.MergeResponseH\000\022<\n\014truncate_log\030\r \001(\0132"
    "$.cockroach.proto.TruncateLogResponseH\000\022"
    "<\n\014leader_lease\030\016 \001(\0132$.cockroach.proto."
    "LeaderLeaseResponseH\000\022/\n\005batch\030\036 \001(\0132\036.c"
    "ockroach.proto.BatchResponseH\000:\004\310\240\037\001B\007\n\005"
    "value\"\335\010\n\020RaftCommandUnion\022*\n\003get\030\001 \001(\0132"
    "\033.cockroach.proto.GetRequestH\000\022*\n\003put\030\002 "
    "\001(\0132\033.cockroach.proto.PutRequestH\000\022A\n\017co"
    "nditional_put\030\003 \001(\0132&.cockroach.proto.Co"
    "nditionalPutRequestH\000\0226\n\tincrement\030\004 \001(\013"
    "2!.cockroach.proto.IncrementRequestH\000\0220\n"
    "\006delete\030\005 \001(\0132\036.cockroach.proto.DeleteRe"
    "questH\000\022;\n\014delete_range\030\006 \001(\0132#.cockroac"
    "h.proto.DeleteRangeRequestH\000\022,\n\004scan\030\007 \001"
    "(\0132\034.cockroach.proto.ScanRequestH\000\022A\n\017en"
    "d_transaction\030\010 \001(\0132&.cockroach.proto.En"
    "dTransactionRequestH\000\022;\n\014range_lookup\030\t "
    "\001(\0132#.cockroach.proto.RangeLookupRequest"
    "H\000\022=\n\rheartbeat_txn\030\n \001(\0132$.cockroach.pr"
    "oto.HeartbeatTxnRequestH\000\0220\n\002gc\030\013 \001(\0132\032."
    "cockroach.proto.GCRequestB\006\342\336\037\002GCH\000\0223\n\010p"
    "ush_txn\030\014 \001(\0132\037.cockroach.proto.PushTxnR"
    "equestH\000\022\?\n\016resolve_intent\030\r \001(\0132%.cockr"
    "oach.proto.ResolveIntentRequestH\000\022J\n\024res"
    "olve_intent_range\030\016 \001(\0132*.cockroach.prot"
    "o.ResolveIntentRangeRequestH\000\0227\n\016merge_r"
    "esponse\030\017 \001(\0132\035.cockroach.proto.MergeReq"
    "uestH\000\022;\n\014truncate_log\030\020 \001(\0132#.cockroach"
    ".proto.TruncateLogRequestH\000\0224\n\005lease\030\021 \001"
    "(\0132#.cockroach.proto.LeaderLeaseRequestH"
    "\000\022;\n\014reverse_scan\030\022 \001(\0132#.cockroach.prot"
    "o.ReverseScanRequestH\000\022.\n\005batch\030\036 \001(\0132\035."
    "cockroach.proto.BatchRequestH\000:\004\310\240\037\001B\007\n\005"
    "value\"\255\001\n\013RaftCommand\022,\n\010range_id\030\001 \001(\003B"
    "\032\310\336\037\000\342\336\037\007RangeID\372\336\037\007RangeID\022:\n\016origin_no"
    "de_id\030\002 \001(\004B\"\310\336\037\000\342\336\037\014OriginNodeID\372\336\037\nRaf"
    "tNodeID\0224\n\003cmd\030\003 \001(\0132!.cockroach.proto.R"
    "aftCommandUnionB\004\310\336\037\000\"O\n\022RaftMessageRequ"
    "est\022,\n\010group_id\030\001 \001(\004B\032\310\336\037\000\342\336\037\007GroupID\372\336"
    "\037\007RangeID\022\013\n\003msg\030\002 \001(\014\"\025\n\023RaftMessageRes"
    "ponse\"\236\001\n\026InternalTimeSeriesData\022#\n\025star"
    "t_timestamp_nanos\030\001 \001(\003B\004\310\336\037\000\022#\n\025sample_"
    "duration_nanos\030\002 \001(\003B\004\310\336\037\000\022:\n\007samples\030\003 "
    "\003(\0132).cockroach.proto.InternalTimeSeries"
    "Sample\"r\n\030InternalTimeSeriesSample\022\024\n\006of"
    "fset\030\001 \001(\005B\004\310\336\037\000\022\023\n\005count\030\006 \001(\rB\004\310\336\037\000\022\021\n"
    "\003sum\030\007 \001(\001B\004\310\336\037\000\022\013\n\003max\030\010 \001(\001\022\013\n\003min\030\t \001"
    "(\001\"=\n\022RaftTruncatedState\022\023\n\005index\030\001 \001(\004B"
    "\004\310\336\037\000\022\022\n\004term\030\002 \001(\004B\004\310\336\037\000\"\274\001\n\020RaftSnapsh"
    "otData\022@\n\020range_descriptor\030\001 \001(\0132 .cockr"
    "oach.proto.RangeDescriptorB\004\310\336\037\000\022>\n\002KV\030\002"
    " \003(\0132*.cockroach.proto.RaftSnapshotData."
    "KeyValueB\006\342\336\037\002KV\032&\n\010KeyValue\022\013\n\003key\030\001 \001("
    "\014\022\r\n\005value\030\002 \001(\014*%\n\021InternalValueType\022\n\n"
    "\006_CR_TS\020\001\032\004\210\243\036\000B\023Z\005proto\340\342\036\001\310\342\036\001\320\342\036\001", 3036);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/proto/internal.proto", &protobuf_RegisterTypes);
  ResponseCacheEntry::default_instance_ = new ResponseCacheEntry();
  ResponseCacheEntry_default_oneof_instance_ = new ResponseCacheEntryOneofInstance();
  RaftCommandUnion::default_instance_ = new RaftCommandUnion();
  RaftCommandUnion_default_oneof_instance_ = new RaftCommandUnionOneofInstance();
  RaftCommand::default_instance_ = new RaftCommand();
  RaftMessageRequest::default_instance_ = new RaftMessageRequest();
  RaftMessageResponse::default_instance_ = new RaftMessageResponse();
  InternalTimeSeriesData::default_instance_ = new InternalTimeSeriesData();
  InternalTimeSeriesSample::default_instance_ = new InternalTimeSeriesSample();
  RaftTruncatedState::default_instance_ = new RaftTruncatedState();
  RaftSnapshotData::default_instance_ = new RaftSnapshotData();
  RaftSnapshotData_KeyValue::default_instance_ = new RaftSnapshotData_KeyValue();
  ResponseCacheEntry::default_instance_->InitAsDefaultInstance();
  RaftCommandUnion::default_instance_->InitAsDefaultInstance();
  RaftCommand::default_instance_->InitAsDefaultInstance();
  RaftMessageRequest::default_instance_->InitAsDefaultInstance();
  RaftMessageResponse::default_instance_->InitAsDefaultInstance();
  InternalTimeSeriesData::default_instance_->InitAsDefaultInstance();
  InternalTimeSeriesSample::default_instance_->InitAsDefaultInstance();
  RaftTruncatedState::default_instance_->InitAsDefaultInstance();
  RaftSnapshotData::default_instance_->InitAsDefaultInstance();
  RaftSnapshotData_KeyValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fproto_2finternal_2eproto {
  StaticDescriptorInitializer_cockroach_2fproto_2finternal_2eproto() {
    protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  }
} static_descriptor_initializer_cockroach_2fproto_2finternal_2eproto_;
const ::google::protobuf::EnumDescriptor* InternalValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalValueType_descriptor_;
}
bool InternalValueType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ResponseCacheEntry::kPutFieldNumber;
const int ResponseCacheEntry::kConditionalPutFieldNumber;
const int ResponseCacheEntry::kIncrementFieldNumber;
const int ResponseCacheEntry::kDeleteFieldNumber;
const int ResponseCacheEntry::kDeleteRangeFieldNumber;
const int ResponseCacheEntry::kEndTransactionFieldNumber;
const int ResponseCacheEntry::kHeartbeatTxnFieldNumber;
const int ResponseCacheEntry::kGcFieldNumber;
const int ResponseCacheEntry::kPushTxnFieldNumber;
const int ResponseCacheEntry::kResolveIntentFieldNumber;
const int ResponseCacheEntry::kResolveIntentRangeFieldNumber;
const int ResponseCacheEntry::kMergeFieldNumber;
const int ResponseCacheEntry::kTruncateLogFieldNumber;
const int ResponseCacheEntry::kLeaderLeaseFieldNumber;
const int ResponseCacheEntry::kBatchFieldNumber;
#endif  // !_MSC_VER

ResponseCacheEntry::ResponseCacheEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.ResponseCacheEntry)
}

void ResponseCacheEntry::InitAsDefaultInstance() {
  ResponseCacheEntry_default_oneof_instance_->put_ = const_cast< ::cockroach::proto::PutResponse*>(&::cockroach::proto::PutResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->conditional_put_ = const_cast< ::cockroach::proto::ConditionalPutResponse*>(&::cockroach::proto::ConditionalPutResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->increment_ = const_cast< ::cockroach::proto::IncrementResponse*>(&::cockroach::proto::IncrementResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->delete__ = const_cast< ::cockroach::proto::DeleteResponse*>(&::cockroach::proto::DeleteResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->delete_range_ = const_cast< ::cockroach::proto::DeleteRangeResponse*>(&::cockroach::proto::DeleteRangeResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->end_transaction_ = const_cast< ::cockroach::proto::EndTransactionResponse*>(&::cockroach::proto::EndTransactionResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->heartbeat_txn_ = const_cast< ::cockroach::proto::HeartbeatTxnResponse*>(&::cockroach::proto::HeartbeatTxnResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->gc_ = const_cast< ::cockroach::proto::GCResponse*>(&::cockroach::proto::GCResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->push_txn_ = const_cast< ::cockroach::proto::PushTxnResponse*>(&::cockroach::proto::PushTxnResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->resolve_intent_ = const_cast< ::cockroach::proto::ResolveIntentResponse*>(&::cockroach::proto::ResolveIntentResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->resolve_intent_range_ = const_cast< ::cockroach::proto::ResolveIntentRangeResponse*>(&::cockroach::proto::ResolveIntentRangeResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->merge_ = const_cast< ::cockroach::proto::MergeResponse*>(&::cockroach::proto::MergeResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->truncate_log_ = const_cast< ::cockroach::proto::TruncateLogResponse*>(&::cockroach::proto::TruncateLogResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->leader_lease_ = const_cast< ::cockroach::proto::LeaderLeaseResponse*>(&::cockroach::proto::LeaderLeaseResponse::default_instance());
  ResponseCacheEntry_default_oneof_instance_->batch_ = const_cast< ::cockroach::proto::BatchResponse*>(&::cockroach::proto::BatchResponse::default_instance());
}

ResponseCacheEntry::ResponseCacheEntry(const ResponseCacheEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.ResponseCacheEntry)
}

void ResponseCacheEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_value();
}

ResponseCacheEntry::~ResponseCacheEntry() {
  // @@protoc_insertion_point(destructor:cockroach.proto.ResponseCacheEntry)
  SharedDtor();
}

void ResponseCacheEntry::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void ResponseCacheEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCacheEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCacheEntry_descriptor_;
}

const ResponseCacheEntry& ResponseCacheEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

ResponseCacheEntry* ResponseCacheEntry::default_instance_ = NULL;

ResponseCacheEntry* ResponseCacheEntry::New(::google::protobuf::Arena* arena) const {
  ResponseCacheEntry* n = new ResponseCacheEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseCacheEntry::clear_value() {
  switch(value_case()) {
    case kPut: {
      delete value_.put_;
      break;
    }
    case kConditionalPut: {
      delete value_.conditional_put_;
      break;
    }
    case kIncrement: {
      delete value_.increment_;
      break;
    }
    case kDelete: {
      delete value_.delete__;
      break;
    }
    case kDeleteRange: {
      delete value_.delete_range_;
      break;
    }
    case kEndTransaction: {
      delete value_.end_transaction_;
      break;
    }
    case kHeartbeatTxn: {
      delete value_.heartbeat_txn_;
      break;
    }
    case kGc: {
      delete value_.gc_;
      break;
    }
    case kPushTxn: {
      delete value_.push_txn_;
      break;
    }
    case kResolveIntent: {
      delete value_.resolve_intent_;
      break;
    }
    case kResolveIntentRange: {
      delete value_.resolve_intent_range_;
      break;
    }
    case kMerge: {
      delete value_.merge_;
      break;
    }
    case kTruncateLog: {
      delete value_.truncate_log_;
      break;
    }
    case kLeaderLease: {
      delete value_.leader_lease_;
      break;
    }
    case kBatch: {
      delete value_.batch_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ResponseCacheEntry::Clear() {
  clear_value();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseCacheEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.ResponseCacheEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.PutResponse put = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_conditional_put;
        break;
      }

      // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
      case 2: {
        if (tag == 18) {
         parse_conditional_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_increment;
        break;
      }

      // optional .cockroach.proto.IncrementResponse increment = 3;
      case 3: {
        if (tag == 26) {
         parse_increment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_increment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_delete;
        break;
      }

      // optional .cockroach.proto.DeleteResponse delete = 4;
      case 4: {
        if (tag == 34) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete_range;
        break;
      }

      // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
      case 5: {
        if (tag == 42) {
         parse_delete_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_end_transaction;
        break;
      }

      // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
      case 6: {
        if (tag == 50) {
         parse_end_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_heartbeat_txn;
        break;
      }

      // optional .cockroach.proto.HeartbeatTxnResponse heartbeat_txn = 7;
      case 7: {
        if (tag == 58) {
         parse_heartbeat_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gc;
        break;
      }

      // optional .cockroach.proto.GCResponse gc = 8;
      case 8: {
        if (tag == 66) {
         parse_gc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_push_txn;
        break;
      }

      // optional .cockroach.proto.PushTxnResponse push_txn = 9;
      case 9: {
        if (tag == 74) {
         parse_push_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_resolve_intent;
        break;
      }

      // optional .cockroach.proto.ResolveIntentResponse resolve_intent = 10;
      case 10: {
        if (tag == 82) {
         parse_resolve_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolve_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_resolve_intent_range;
        break;
      }

      // optional .cockroach.proto.ResolveIntentRangeResponse resolve_intent_range = 11;
      case 11: {
        if (tag == 90) {
         parse_resolve_intent_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolve_intent_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_merge;
        break;
      }

      // optional .cockroach.proto.MergeResponse merge = 12;
      case 12: {
        if (tag == 98) {
         parse_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_truncate_log;
        break;
      }

      // optional .cockroach.proto.TruncateLogResponse truncate_log = 13;
      case 13: {
        if (tag == 106) {
         parse_truncate_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truncate_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_leader_lease;
        break;
      }

      // optional .cockroach.proto.LeaderLeaseResponse leader_lease = 14;
      case 14: {
        if (tag == 114) {
         parse_leader_lease:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader_lease()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_batch;
        break;
      }

      // optional .cockroach.proto.BatchResponse batch = 30;
      case 30: {
        if (tag == 242) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.ResponseCacheEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.ResponseCacheEntry)
  return false;
#undef DO_
}

void ResponseCacheEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.ResponseCacheEntry)
  // optional .cockroach.proto.PutResponse put = 1;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *value_.put_, output);
  }

  // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
  if (has_conditional_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.conditional_put_, output);
  }

  // optional .cockroach.proto.IncrementResponse increment = 3;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.increment_, output);
  }

  // optional .cockroach.proto.DeleteResponse delete = 4;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.delete__, output);
  }

  // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.delete_range_, output);
  }

  // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
  if (has_end_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.end_transaction_, output);
  }

  // optional .cockroach.proto.HeartbeatTxnResponse heartbeat_txn = 7;
  if (has_heartbeat_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.heartbeat_txn_, output);
  }

  // optional .cockroach.proto.GCResponse gc = 8;
  if (has_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.gc_, output);
  }

  // optional .cockroach.proto.PushTxnResponse push_txn = 9;
  if (has_push_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.push_txn_, output);
  }

  // optional .cockroach.proto.ResolveIntentResponse resolve_intent = 10;
  if (has_resolve_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *value_.resolve_intent_, output);
  }

  // optional .cockroach.proto.ResolveIntentRangeResponse resolve_intent_range = 11;
  if (has_resolve_intent_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.resolve_intent_range_, output);
  }

  // optional .cockroach.proto.MergeResponse merge = 12;
  if (has_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *value_.merge_, output);
  }

  // optional .cockroach.proto.TruncateLogResponse truncate_log = 13;
  if (has_truncate_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *value_.truncate_log_, output);
  }

  // optional .cockroach.proto.LeaderLeaseResponse leader_lease = 14;
  if (has_leader_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *value_.leader_lease_, output);
  }

  // optional .cockroach.proto.BatchResponse batch = 30;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *value_.batch_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.ResponseCacheEntry)
}

::google::protobuf::uint8* ResponseCacheEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.ResponseCacheEntry)
  // optional .cockroach.proto.PutResponse put = 1;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *value_.put_, target);
  }

  // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
  if (has_conditional_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *value_.conditional_put_, target);
  }

  // optional .cockroach.proto.IncrementResponse increment = 3;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *value_.increment_, target);
  }

  // optional .cockroach.proto.DeleteResponse delete = 4;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *value_.delete__, target);
  }

  // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
  if (has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *value_.delete_range_, target);
  }

  // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
  if (has_end_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *value_.end_transaction_, target);
  }

  // optional .cockroach.proto.HeartbeatTxnResponse heartbeat_txn = 7;
  if (has_heartbeat_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *value_.heartbeat_txn_, target);
  }

  // optional .cockroach.proto.GCResponse gc = 8;
  if (has_gc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *value_.gc_, target);
  }

  // optional .cockroach.proto.PushTxnResponse push_txn = 9;
  if (has_push_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *value_.push_txn_, target);
  }

  // optional .cockroach.proto.ResolveIntentResponse resolve_intent = 10;
  if (has_resolve_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *value_.resolve_intent_, target);
  }

  // optional .cockroach.proto.ResolveIntentRangeResponse resolve_intent_range = 11;
  if (has_resolve_intent_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *value_.resolve_intent_range_, target);
  }

  // optional .cockroach.proto.MergeResponse merge = 12;
  if (has_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *value_.merge_, target);
  }

  // optional .cockroach.proto.TruncateLogResponse truncate_log = 13;
  if (has_truncate_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *value_.truncate_log_, target);
  }

  // optional .cockroach.proto.LeaderLeaseResponse leader_lease = 14;
  if (has_leader_lease()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *value_.leader_lease_, target);
  }

  // optional .cockroach.proto.BatchResponse batch = 30;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *value_.batch_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.ResponseCacheEntry)
  return target;
}

int ResponseCacheEntry::ByteSize() const {
  int total_size = 0;

  switch (value_case()) {
    // optional .cockroach.proto.PutResponse put = 1;
    case kPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.put_);
      break;
    }
    // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
    case kConditionalPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.conditional_put_);
      break;
    }
    // optional .cockroach.proto.IncrementResponse increment = 3;
    case kIncrement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.increment_);
      break;
    }
    // optional .cockroach.proto.DeleteResponse delete = 4;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete__);
      break;
    }
    // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete_range_);
      break;
    }
    // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
    case kEndTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.end_transaction_);
      break;
    }
    // optional .cockroach.proto.HeartbeatTxnResponse heartbeat_txn = 7;
    case kHeartbeatTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.heartbeat_txn_);
      break;
    }
    // optional .cockroach.proto.GCResponse gc = 8;
    case kGc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.gc_);
      break;
    }
    // optional .cockroach.proto.PushTxnResponse push_txn = 9;
    case kPushTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.push_txn_);
      break;
    }
    // optional .cockroach.proto.ResolveIntentResponse resolve_intent = 10;
    case kResolveIntent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.resolve_intent_);
      break;
    }
    // optional .cockroach.proto.ResolveIntentRangeResponse resolve_intent_range = 11;
    case kResolveIntentRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.resolve_intent_range_);
      break;
    }
    // optional .cockroach.proto.MergeResponse merge = 12;
    case kMerge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.merge_);
      break;
    }
    // optional .cockroach.proto.TruncateLogResponse truncate_log = 13;
    case kTruncateLog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.truncate_log_);
      break;
    }
    // optional .cockroach.proto.LeaderLeaseResponse leader_lease = 14;
    case kLeaderLease: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.leader_lease_);
      break;
    }
    // optional .cockroach.proto.BatchResponse batch = 30;
    case kBatch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.batch_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCacheEntry::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResponseCacheEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCacheEntry>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseCacheEntry::MergeFrom(const ResponseCacheEntry& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_case()) {
    case kPut: {
      mutable_put()->::cockroach::proto::PutResponse::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::proto::ConditionalPutResponse::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::proto::IncrementResponse::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::proto::DeleteResponse::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::proto::DeleteRangeResponse::MergeFrom(from.delete_range());
      break;
    }
    case kEndTransaction: {
      mutable_end_transaction()->::cockroach::proto::EndTransactionResponse::MergeFrom(from.end_transaction());
      break;
    }
    case kHeartbeatTxn: {
      mutable_heartbeat_txn()->::cockroach::proto::HeartbeatTxnResponse::MergeFrom(from.heartbeat_txn());
      break;
    }
    case kGc: {
      mutable_gc()->::cockroach::proto::GCResponse::MergeFrom(from.gc());
      break;
    }
    case kPushTxn: {
      mutable_push_txn()->::cockroach::proto::PushTxnResponse::MergeFrom(from.push_txn());
      break;
    }
    case kResolveIntent: {
      mutable_resolve_intent()->::cockroach::proto::ResolveIntentResponse::MergeFrom(from.resolve_intent());
      break;
    }
    case kResolveIntentRange: {
      mutable_resolve_intent_range()->::cockroach::proto::ResolveIntentRangeResponse::MergeFrom(from.resolve_intent_range());
      break;
    }
    case kMerge: {
      mutable_merge()->::cockroach::proto::MergeResponse::MergeFrom(from.merge());
      break;
    }
    case kTruncateLog: {
      mutable_truncate_log()->::cockroach::proto::TruncateLogResponse::MergeFrom(from.truncate_log());
      break;
    }
    case kLeaderLease: {
      mutable_leader_lease()->::cockroach::proto::LeaderLeaseResponse::MergeFrom(from.leader_lease());
      break;
    }
    case kBatch: {
      mutable_batch()->::cockroach::proto::BatchResponse::MergeFrom(from.batch());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseCacheEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCacheEntry::CopyFrom(const ResponseCacheEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCacheEntry::IsInitialized() const {

  return true;
}

void ResponseCacheEntry::Swap(ResponseCacheEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCacheEntry::InternalSwap(ResponseCacheEntry* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseCacheEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCacheEntry_descriptor_;
  metadata.reflection = ResponseCacheEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseCacheEntry

// optional .cockroach.proto.PutResponse put = 1;
bool ResponseCacheEntry::has_put() const {
  return value_case() == kPut;
}
void ResponseCacheEntry::set_has_put() {
  _oneof_case_[0] = kPut;
}
void ResponseCacheEntry::clear_put() {
  if (has_put()) {
    delete value_.put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::PutResponse& ResponseCacheEntry::put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.put)
  return has_put() ? *value_.put_
                      : ::cockroach::proto::PutResponse::default_instance();
}
 ::cockroach::proto::PutResponse* ResponseCacheEntry::mutable_put() {
  if (!has_put()) {
    clear_value();
    set_has_put();
    value_.put_ = new ::cockroach::proto::PutResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.put)
  return value_.put_;
}
 ::cockroach::proto::PutResponse* ResponseCacheEntry::release_put() {
  if (has_put()) {
    clear_has_value();
    ::cockroach::proto::PutResponse* temp = value_.put_;
    value_.put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_put(::cockroach::proto::PutResponse* put) {
  clear_value();
  if (put) {
    set_has_put();
    value_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.put)
}

// optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
bool ResponseCacheEntry::has_conditional_put() const {
  return value_case() == kConditionalPut;
}
void ResponseCacheEntry::set_has_conditional_put() {
  _oneof_case_[0] = kConditionalPut;
}
void ResponseCacheEntry::clear_conditional_put() {
  if (has_conditional_put()) {
    delete value_.conditional_put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ConditionalPutResponse& ResponseCacheEntry::conditional_put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.conditional_put)
  return has_conditional_put() ? *value_.conditional_put_
                      : ::cockroach::proto::ConditionalPutResponse::default_instance();
}
 ::cockroach::proto::ConditionalPutResponse* ResponseCacheEntry::mutable_conditional_put() {
  if (!has_conditional_put()) {
    clear_value();
    set_has_conditional_put();
    value_.conditional_put_ = new ::cockroach::proto::ConditionalPutResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.conditional_put)
  return value_.conditional_put_;
}
 ::cockroach::proto::ConditionalPutResponse* ResponseCacheEntry::release_conditional_put() {
  if (has_conditional_put()) {
    clear_has_value();
    ::cockroach::proto::ConditionalPutResponse* temp = value_.conditional_put_;
    value_.conditional_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_conditional_put(::cockroach::proto::ConditionalPutResponse* conditional_put) {
  clear_value();
  if (conditional_put) {
    set_has_conditional_put();
    value_.conditional_put_ = conditional_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.conditional_put)
}

// optional .cockroach.proto.IncrementResponse increment = 3;
bool ResponseCacheEntry::has_increment() const {
  return value_case() == kIncrement;
}
void ResponseCacheEntry::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
void ResponseCacheEntry::clear_increment() {
  if (has_increment()) {
    delete value_.increment_;
    clear_has_value();
  }
}
 const ::cockroach::proto::IncrementResponse& ResponseCacheEntry::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.increment)
  return has_increment() ? *value_.increment_
                      : ::cockroach::proto::IncrementResponse::default_instance();
}
 ::cockroach::proto::IncrementResponse* ResponseCacheEntry::mutable_increment() {
  if (!has_increment()) {
    clear_value();
    set_has_increment();
    value_.increment_ = new ::cockroach::proto::IncrementResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.increment)
  return value_.increment_;
}
 ::cockroach::proto::IncrementResponse* ResponseCacheEntry::release_increment() {
  if (has_increment()) {
    clear_has_value();
    ::cockroach::proto::IncrementResponse* temp = value_.increment_;
    value_.increment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_increment(::cockroach::proto::IncrementResponse* increment) {
  clear_value();
  if (increment) {
    set_has_increment();
    value_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.increment)
}

// optional .cockroach.proto.DeleteResponse delete = 4;
bool ResponseCacheEntry::has_delete_() const {
  return value_case() == kDelete;
}
void ResponseCacheEntry::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
void ResponseCacheEntry::clear_delete_() {
  if (has_delete_()) {
    delete value_.delete__;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteResponse& ResponseCacheEntry::delete_() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.delete)
  return has_delete_() ? *value_.delete__
                      : ::cockroach::proto::DeleteResponse::default_instance();
}
 ::cockroach::proto::DeleteResponse* ResponseCacheEntry::mutable_delete_() {
  if (!has_delete_()) {
    clear_value();
    set_has_delete_();
    value_.delete__ = new ::cockroach::proto::DeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.delete)
  return value_.delete__;
}
 ::cockroach::proto::DeleteResponse* ResponseCacheEntry::release_delete_() {
  if (has_delete_()) {
    clear_has_value();
    ::cockroach::proto::DeleteResponse* temp = value_.delete__;
    value_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_delete_(::cockroach::proto::DeleteResponse* delete_) {
  clear_value();
  if (delete_) {
    set_has_delete_();
    value_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.delete)
}

// optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
bool ResponseCacheEntry::has_delete_range() const {
  return value_case() == kDeleteRange;
}
void ResponseCacheEntry::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
void ResponseCacheEntry::clear_delete_range() {
  if (has_delete_range()) {
    delete value_.delete_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteRangeResponse& ResponseCacheEntry::delete_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.delete_range)
  return has_delete_range() ? *value_.delete_range_
                      : ::cockroach::proto::DeleteRangeResponse::default_instance();
}
 ::cockroach::proto::DeleteRangeResponse* ResponseCacheEntry::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_value();
    set_has_delete_range();
    value_.delete_range_ = new ::cockroach::proto::DeleteRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.delete_range)
  return value_.delete_range_;
}
 ::cockroach::proto::DeleteRangeResponse* ResponseCacheEntry::release_delete_range() {
  if (has_delete_range()) {
    clear_has_value();
    ::cockroach::proto::DeleteRangeResponse* temp = value_.delete_range_;
    value_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_delete_range(::cockroach::proto::DeleteRangeResponse* delete_range) {
  clear_value();
  if (delete_range) {
    set_has_delete_range();
    value_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.delete_range)
}

// optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
bool ResponseCacheEntry::has_end_transaction() const {
  return value_case() == kEndTransaction;
}
void ResponseCacheEntry::set_has_end_transaction() {
  _oneof_case_[0] = kEndTransaction;
}
void ResponseCacheEntry::clear_end_transaction() {
  if (has_end_transaction()) {
    delete value_.end_transaction_;
    clear_has_value();
  }
}
 const ::cockroach::proto::EndTransactionResponse& ResponseCacheEntry::end_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.end_transaction)
  return has_end_transaction() ? *value_.end_transaction_
                      : ::cockroach::proto::EndTransactionResponse::default_instance();
}
 ::cockroach::proto::EndTransactionResponse* ResponseCacheEntry::mutable_end_transaction() {
  if (!has_end_transaction()) {
    clear_value();
    set_has_end_transaction();
    value_.end_transaction_ = new ::cockroach::proto::EndTransactionResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.end_transaction)
  return value_.end_transaction_;
}
 ::cockroach::proto::EndTransactionResponse* ResponseCacheEntry::release_end_transaction() {
  if (has_end_transaction()) {
    clear_has_value();
    ::cockroach::proto::EndTransactionResponse* temp = value_.end_transaction_;
    value_.end_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_end_transaction(::cockroach::proto::EndTransactionResponse* end_transaction) {
  clear_value();
  if (end_transaction) {
    set_has_end_transaction();
    value_.end_transaction_ = end_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.end_transaction)
}

// optional .cockroach.proto.HeartbeatTxnResponse heartbeat_txn = 7;
bool ResponseCacheEntry::has_heartbeat_txn() const {
  return value_case() == kHeartbeatTxn;
}
void ResponseCacheEntry::set_has_heartbeat_txn() {
  _oneof_case_[0] = kHeartbeatTxn;
}
void ResponseCacheEntry::clear_heartbeat_txn() {
  if (has_heartbeat_txn()) {
    delete value_.heartbeat_txn_;
    clear_has_value();
  }
}
 const ::cockroach::proto::HeartbeatTxnResponse& ResponseCacheEntry::heartbeat_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.heartbeat_txn)
  return has_heartbeat_txn() ? *value_.heartbeat_txn_
                      : ::cockroach::proto::HeartbeatTxnResponse::default_instance();
}
 ::cockroach::proto::HeartbeatTxnResponse* ResponseCacheEntry::mutable_heartbeat_txn() {
  if (!has_heartbeat_txn()) {
    clear_value();
    set_has_heartbeat_txn();
    value_.heartbeat_txn_ = new ::cockroach::proto::HeartbeatTxnResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.heartbeat_txn)
  return value_.heartbeat_txn_;
}
 ::cockroach::proto::HeartbeatTxnResponse* ResponseCacheEntry::release_heartbeat_txn() {
  if (has_heartbeat_txn()) {
    clear_has_value();
    ::cockroach::proto::HeartbeatTxnResponse* temp = value_.heartbeat_txn_;
    value_.heartbeat_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_heartbeat_txn(::cockroach::proto::HeartbeatTxnResponse* heartbeat_txn) {
  clear_value();
  if (heartbeat_txn) {
    set_has_heartbeat_txn();
    value_.heartbeat_txn_ = heartbeat_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.heartbeat_txn)
}

// optional .cockroach.proto.GCResponse gc = 8;
bool ResponseCacheEntry::has_gc() const {
  return value_case() == kGc;
}
void ResponseCacheEntry::set_has_gc() {
  _oneof_case_[0] = kGc;
}
void ResponseCacheEntry::clear_gc() {
  if (has_gc()) {
    delete value_.gc_;
    clear_has_value();
  }
}
 const ::cockroach::proto::GCResponse& ResponseCacheEntry::gc() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.gc)
  return has_gc() ? *value_.gc_
                      : ::cockroach::proto::GCResponse::default_instance();
}
 ::cockroach::proto::GCResponse* ResponseCacheEntry::mutable_gc() {
  if (!has_gc()) {
    clear_value();
    set_has_gc();
    value_.gc_ = new ::cockroach::proto::GCResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.gc)
  return value_.gc_;
}
 ::cockroach::proto::GCResponse* ResponseCacheEntry::release_gc() {
  if (has_gc()) {
    clear_has_value();
    ::cockroach::proto::GCResponse* temp = value_.gc_;
    value_.gc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_gc(::cockroach::proto::GCResponse* gc) {
  clear_value();
  if (gc) {
    set_has_gc();
    value_.gc_ = gc;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.gc)
}

// optional .cockroach.proto.PushTxnResponse push_txn = 9;
bool ResponseCacheEntry::has_push_txn() const {
  return value_case() == kPushTxn;
}
void ResponseCacheEntry::set_has_push_txn() {
  _oneof_case_[0] = kPushTxn;
}
void ResponseCacheEntry::clear_push_txn() {
  if (has_push_txn()) {
    delete value_.push_txn_;
    clear_has_value();
  }
}
 const ::cockroach::proto::PushTxnResponse& ResponseCacheEntry::push_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.push_txn)
  return has_push_txn() ? *value_.push_txn_
                      : ::cockroach::proto::PushTxnResponse::default_instance();
}
 ::cockroach::proto::PushTxnResponse* ResponseCacheEntry::mutable_push_txn() {
  if (!has_push_txn()) {
    clear_value();
    set_has_push_txn();
    value_.push_txn_ = new ::cockroach::proto::PushTxnResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.push_txn)
  return value_.push_txn_;
}
 ::cockroach::proto::PushTxnResponse* ResponseCacheEntry::release_push_txn() {
  if (has_push_txn()) {
    clear_has_value();
    ::cockroach::proto::PushTxnResponse* temp = value_.push_txn_;
    value_.push_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_push_txn(::cockroach::proto::PushTxnResponse* push_txn) {
  clear_value();
  if (push_txn) {
    set_has_push_txn();
    value_.push_txn_ = push_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.push_txn)
}

// optional .cockroach.proto.ResolveIntentResponse resolve_intent = 10;
bool ResponseCacheEntry::has_resolve_intent() const {
  return value_case() == kResolveIntent;
}
void ResponseCacheEntry::set_has_resolve_intent() {
  _oneof_case_[0] = kResolveIntent;
}
void ResponseCacheEntry::clear_resolve_intent() {
  if (has_resolve_intent()) {
    delete value_.resolve_intent_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ResolveIntentResponse& ResponseCacheEntry::resolve_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.resolve_intent)
  return has_resolve_intent() ? *value_.resolve_intent_
                      : ::cockroach::proto::ResolveIntentResponse::default_instance();
}
 ::cockroach::proto::ResolveIntentResponse* ResponseCacheEntry::mutable_resolve_intent() {
  if (!has_resolve_intent()) {
    clear_value();
    set_has_resolve_intent();
    value_.resolve_intent_ = new ::cockroach::proto::ResolveIntentResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.resolve_intent)
  return value_.resolve_intent_;
}
 ::cockroach::proto::ResolveIntentResponse* ResponseCacheEntry::release_resolve_intent() {
  if (has_resolve_intent()) {
    clear_has_value();
    ::cockroach::proto::ResolveIntentResponse* temp = value_.resolve_intent_;
    value_.resolve_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_resolve_intent(::cockroach::proto::ResolveIntentResponse* resolve_intent) {
  clear_value();
  if (resolve_intent) {
    set_has_resolve_intent();
    value_.resolve_intent_ = resolve_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.resolve_intent)
}

// optional .cockroach.proto.ResolveIntentRangeResponse resolve_intent_range = 11;
bool ResponseCacheEntry::has_resolve_intent_range() const {
  return value_case() == kResolveIntentRange;
}
void ResponseCacheEntry::set_has_resolve_intent_range() {
  _oneof_case_[0] = kResolveIntentRange;
}
void ResponseCacheEntry::clear_resolve_intent_range() {
  if (has_resolve_intent_range()) {
    delete value_.resolve_intent_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ResolveIntentRangeResponse& ResponseCacheEntry::resolve_intent_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.resolve_intent_range)
  return has_resolve_intent_range() ? *value_.resolve_intent_range_
                      : ::cockroach::proto::ResolveIntentRangeResponse::default_instance();
}
 ::cockroach::proto::ResolveIntentRangeResponse* ResponseCacheEntry::mutable_resolve_intent_range() {
  if (!has_resolve_intent_range()) {
    clear_value();
    set_has_resolve_intent_range();
    value_.resolve_intent_range_ = new ::cockroach::proto::ResolveIntentRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.resolve_intent_range)
  return value_.resolve_intent_range_;
}
 ::cockroach::proto::ResolveIntentRangeResponse* ResponseCacheEntry::release_resolve_intent_range() {
  if (has_resolve_intent_range()) {
    clear_has_value();
    ::cockroach::proto::ResolveIntentRangeResponse* temp = value_.resolve_intent_range_;
    value_.resolve_intent_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_resolve_intent_range(::cockroach::proto::ResolveIntentRangeResponse* resolve_intent_range) {
  clear_value();
  if (resolve_intent_range) {
    set_has_resolve_intent_range();
    value_.resolve_intent_range_ = resolve_intent_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.resolve_intent_range)
}

// optional .cockroach.proto.MergeResponse merge = 12;
bool ResponseCacheEntry::has_merge() const {
  return value_case() == kMerge;
}
void ResponseCacheEntry::set_has_merge() {
  _oneof_case_[0] = kMerge;
}
void ResponseCacheEntry::clear_merge() {
  if (has_merge()) {
    delete value_.merge_;
    clear_has_value();
  }
}
 const ::cockroach::proto::MergeResponse& ResponseCacheEntry::merge() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.merge)
  return has_merge() ? *value_.merge_
                      : ::cockroach::proto::MergeResponse::default_instance();
}
 ::cockroach::proto::MergeResponse* ResponseCacheEntry::mutable_merge() {
  if (!has_merge()) {
    clear_value();
    set_has_merge();
    value_.merge_ = new ::cockroach::proto::MergeResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.merge)
  return value_.merge_;
}
 ::cockroach::proto::MergeResponse* ResponseCacheEntry::release_merge() {
  if (has_merge()) {
    clear_has_value();
    ::cockroach::proto::MergeResponse* temp = value_.merge_;
    value_.merge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_merge(::cockroach::proto::MergeResponse* merge) {
  clear_value();
  if (merge) {
    set_has_merge();
    value_.merge_ = merge;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.merge)
}

// optional .cockroach.proto.TruncateLogResponse truncate_log = 13;
bool ResponseCacheEntry::has_truncate_log() const {
  return value_case() == kTruncateLog;
}
void ResponseCacheEntry::set_has_truncate_log() {
  _oneof_case_[0] = kTruncateLog;
}
void ResponseCacheEntry::clear_truncate_log() {
  if (has_truncate_log()) {
    delete value_.truncate_log_;
    clear_has_value();
  }
}
 const ::cockroach::proto::TruncateLogResponse& ResponseCacheEntry::truncate_log() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.truncate_log)
  return has_truncate_log() ? *value_.truncate_log_
                      : ::cockroach::proto::TruncateLogResponse::default_instance();
}
 ::cockroach::proto::TruncateLogResponse* ResponseCacheEntry::mutable_truncate_log() {
  if (!has_truncate_log()) {
    clear_value();
    set_has_truncate_log();
    value_.truncate_log_ = new ::cockroach::proto::TruncateLogResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.truncate_log)
  return value_.truncate_log_;
}
 ::cockroach::proto::TruncateLogResponse* ResponseCacheEntry::release_truncate_log() {
  if (has_truncate_log()) {
    clear_has_value();
    ::cockroach::proto::TruncateLogResponse* temp = value_.truncate_log_;
    value_.truncate_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_truncate_log(::cockroach::proto::TruncateLogResponse* truncate_log) {
  clear_value();
  if (truncate_log) {
    set_has_truncate_log();
    value_.truncate_log_ = truncate_log;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.truncate_log)
}

// optional .cockroach.proto.LeaderLeaseResponse leader_lease = 14;
bool ResponseCacheEntry::has_leader_lease() const {
  return value_case() == kLeaderLease;
}
void ResponseCacheEntry::set_has_leader_lease() {
  _oneof_case_[0] = kLeaderLease;
}
void ResponseCacheEntry::clear_leader_lease() {
  if (has_leader_lease()) {
    delete value_.leader_lease_;
    clear_has_value();
  }
}
 const ::cockroach::proto::LeaderLeaseResponse& ResponseCacheEntry::leader_lease() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.leader_lease)
  return has_leader_lease() ? *value_.leader_lease_
                      : ::cockroach::proto::LeaderLeaseResponse::default_instance();
}
 ::cockroach::proto::LeaderLeaseResponse* ResponseCacheEntry::mutable_leader_lease() {
  if (!has_leader_lease()) {
    clear_value();
    set_has_leader_lease();
    value_.leader_lease_ = new ::cockroach::proto::LeaderLeaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.leader_lease)
  return value_.leader_lease_;
}
 ::cockroach::proto::LeaderLeaseResponse* ResponseCacheEntry::release_leader_lease() {
  if (has_leader_lease()) {
    clear_has_value();
    ::cockroach::proto::LeaderLeaseResponse* temp = value_.leader_lease_;
    value_.leader_lease_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_leader_lease(::cockroach::proto::LeaderLeaseResponse* leader_lease) {
  clear_value();
  if (leader_lease) {
    set_has_leader_lease();
    value_.leader_lease_ = leader_lease;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.leader_lease)
}

// optional .cockroach.proto.BatchResponse batch = 30;
bool ResponseCacheEntry::has_batch() const {
  return value_case() == kBatch;
}
void ResponseCacheEntry::set_has_batch() {
  _oneof_case_[0] = kBatch;
}
void ResponseCacheEntry::clear_batch() {
  if (has_batch()) {
    delete value_.batch_;
    clear_has_value();
  }
}
 const ::cockroach::proto::BatchResponse& ResponseCacheEntry::batch() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseCacheEntry.batch)
  return has_batch() ? *value_.batch_
                      : ::cockroach::proto::BatchResponse::default_instance();
}
 ::cockroach::proto::BatchResponse* ResponseCacheEntry::mutable_batch() {
  if (!has_batch()) {
    clear_value();
    set_has_batch();
    value_.batch_ = new ::cockroach::proto::BatchResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseCacheEntry.batch)
  return value_.batch_;
}
 ::cockroach::proto::BatchResponse* ResponseCacheEntry::release_batch() {
  if (has_batch()) {
    clear_has_value();
    ::cockroach::proto::BatchResponse* temp = value_.batch_;
    value_.batch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ResponseCacheEntry::set_allocated_batch(::cockroach::proto::BatchResponse* batch) {
  clear_value();
  if (batch) {
    set_has_batch();
    value_.batch_ = batch;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseCacheEntry.batch)
}

bool ResponseCacheEntry::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void ResponseCacheEntry::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
ResponseCacheEntry::ValueCase ResponseCacheEntry::value_case() const {
  return ResponseCacheEntry::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RaftCommandUnion::kGetFieldNumber;
const int RaftCommandUnion::kPutFieldNumber;
const int RaftCommandUnion::kConditionalPutFieldNumber;
const int RaftCommandUnion::kIncrementFieldNumber;
const int RaftCommandUnion::kDeleteFieldNumber;
const int RaftCommandUnion::kDeleteRangeFieldNumber;
const int RaftCommandUnion::kScanFieldNumber;
const int RaftCommandUnion::kEndTransactionFieldNumber;
const int RaftCommandUnion::kRangeLookupFieldNumber;
const int RaftCommandUnion::kHeartbeatTxnFieldNumber;
const int RaftCommandUnion::kGcFieldNumber;
const int RaftCommandUnion::kPushTxnFieldNumber;
const int RaftCommandUnion::kResolveIntentFieldNumber;
const int RaftCommandUnion::kResolveIntentRangeFieldNumber;
const int RaftCommandUnion::kMergeResponseFieldNumber;
const int RaftCommandUnion::kTruncateLogFieldNumber;
const int RaftCommandUnion::kLeaseFieldNumber;
const int RaftCommandUnion::kReverseScanFieldNumber;
const int RaftCommandUnion::kBatchFieldNumber;
#endif  // !_MSC_VER

RaftCommandUnion::RaftCommandUnion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftCommandUnion)
}

void RaftCommandUnion::InitAsDefaultInstance() {
  RaftCommandUnion_default_oneof_instance_->get_ = const_cast< ::cockroach::proto::GetRequest*>(&::cockroach::proto::GetRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->put_ = const_cast< ::cockroach::proto::PutRequest*>(&::cockroach::proto::PutRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->conditional_put_ = const_cast< ::cockroach::proto::ConditionalPutRequest*>(&::cockroach::proto::ConditionalPutRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->increment_ = const_cast< ::cockroach::proto::IncrementRequest*>(&::cockroach::proto::IncrementRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->delete__ = const_cast< ::cockroach::proto::DeleteRequest*>(&::cockroach::proto::DeleteRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->delete_range_ = const_cast< ::cockroach::proto::DeleteRangeRequest*>(&::cockroach::proto::DeleteRangeRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->scan_ = const_cast< ::cockroach::proto::ScanRequest*>(&::cockroach::proto::ScanRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->end_transaction_ = const_cast< ::cockroach::proto::EndTransactionRequest*>(&::cockroach::proto::EndTransactionRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->range_lookup_ = const_cast< ::cockroach::proto::RangeLookupRequest*>(&::cockroach::proto::RangeLookupRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->heartbeat_txn_ = const_cast< ::cockroach::proto::HeartbeatTxnRequest*>(&::cockroach::proto::HeartbeatTxnRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->gc_ = const_cast< ::cockroach::proto::GCRequest*>(&::cockroach::proto::GCRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->push_txn_ = const_cast< ::cockroach::proto::PushTxnRequest*>(&::cockroach::proto::PushTxnRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->resolve_intent_ = const_cast< ::cockroach::proto::ResolveIntentRequest*>(&::cockroach::proto::ResolveIntentRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->resolve_intent_range_ = const_cast< ::cockroach::proto::ResolveIntentRangeRequest*>(&::cockroach::proto::ResolveIntentRangeRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->merge_response_ = const_cast< ::cockroach::proto::MergeRequest*>(&::cockroach::proto::MergeRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->truncate_log_ = const_cast< ::cockroach::proto::TruncateLogRequest*>(&::cockroach::proto::TruncateLogRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->lease_ = const_cast< ::cockroach::proto::LeaderLeaseRequest*>(&::cockroach::proto::LeaderLeaseRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->reverse_scan_ = const_cast< ::cockroach::proto::ReverseScanRequest*>(&::cockroach::proto::ReverseScanRequest::default_instance());
  RaftCommandUnion_default_oneof_instance_->batch_ = const_cast< ::cockroach::proto::BatchRequest*>(&::cockroach::proto::BatchRequest::default_instance());
}

RaftCommandUnion::RaftCommandUnion(const RaftCommandUnion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftCommandUnion)
}

void RaftCommandUnion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_value();
}

RaftCommandUnion::~RaftCommandUnion() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftCommandUnion)
  SharedDtor();
}

void RaftCommandUnion::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void RaftCommandUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCommandUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCommandUnion_descriptor_;
}

const RaftCommandUnion& RaftCommandUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftCommandUnion* RaftCommandUnion::default_instance_ = NULL;

RaftCommandUnion* RaftCommandUnion::New(::google::protobuf::Arena* arena) const {
  RaftCommandUnion* n = new RaftCommandUnion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftCommandUnion::clear_value() {
  switch(value_case()) {
    case kGet: {
      delete value_.get_;
      break;
    }
    case kPut: {
      delete value_.put_;
      break;
    }
    case kConditionalPut: {
      delete value_.conditional_put_;
      break;
    }
    case kIncrement: {
      delete value_.increment_;
      break;
    }
    case kDelete: {
      delete value_.delete__;
      break;
    }
    case kDeleteRange: {
      delete value_.delete_range_;
      break;
    }
    case kScan: {
      delete value_.scan_;
      break;
    }
    case kEndTransaction: {
      delete value_.end_transaction_;
      break;
    }
    case kRangeLookup: {
      delete value_.range_lookup_;
      break;
    }
    case kHeartbeatTxn: {
      delete value_.heartbeat_txn_;
      break;
    }
    case kGc: {
      delete value_.gc_;
      break;
    }
    case kPushTxn: {
      delete value_.push_txn_;
      break;
    }
    case kResolveIntent: {
      delete value_.resolve_intent_;
      break;
    }
    case kResolveIntentRange: {
      delete value_.resolve_intent_range_;
      break;
    }
    case kMergeResponse: {
      delete value_.merge_response_;
      break;
    }
    case kTruncateLog: {
      delete value_.truncate_log_;
      break;
    }
    case kLease: {
      delete value_.lease_;
      break;
    }
    case kReverseScan: {
      delete value_.reverse_scan_;
      break;
    }
    case kBatch: {
      delete value_.batch_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void RaftCommandUnion::Clear() {
  clear_value();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftCommandUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftCommandUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.GetRequest get = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_put;
        break;
      }

      // optional .cockroach.proto.PutRequest put = 2;
      case 2: {
        if (tag == 18) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_conditional_put;
        break;
      }

      // optional .cockroach.proto.ConditionalPutRequest conditional_put = 3;
      case 3: {
        if (tag == 26) {
         parse_conditional_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_increment;
        break;
      }

      // optional .cockroach.proto.IncrementRequest increment = 4;
      case 4: {
        if (tag == 34) {
         parse_increment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_increment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete;
        break;
      }

      // optional .cockroach.proto.DeleteRequest delete = 5;
      case 5: {
        if (tag == 42) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_delete_range;
        break;
      }

      // optional .cockroach.proto.DeleteRangeRequest delete_range = 6;
      case 6: {
        if (tag == 50) {
         parse_delete_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scan;
        break;
      }

      // optional .cockroach.proto.ScanRequest scan = 7;
      case 7: {
        if (tag == 58) {
         parse_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_end_transaction;
        break;
      }

      // optional .cockroach.proto.EndTransactionRequest end_transaction = 8;
      case 8: {
        if (tag == 66) {
         parse_end_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_range_lookup;
        break;
      }

      // optional .cockroach.proto.RangeLookupRequest range_lookup = 9;
      case 9: {
        if (tag == 74) {
         parse_range_lookup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_lookup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_heartbeat_txn;
        break;
      }

      // optional .cockroach.proto.HeartbeatTxnRequest heartbeat_txn = 10;
      case 10: {
        if (tag == 82) {
         parse_heartbeat_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_gc;
        break;
      }

      // optional .cockroach.proto.GCRequest gc = 11;
      case 11: {
        if (tag == 90) {
         parse_gc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_push_txn;
        break;
      }

      // optional .cockroach.proto.PushTxnRequest push_txn = 12;
      case 12: {
        if (tag == 98) {
         parse_push_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_resolve_intent;
        break;
      }

      // optional .cockroach.proto.ResolveIntentRequest resolve_intent = 13;
      case 13: {
        if (tag == 106) {
         parse_resolve_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolve_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_resolve_intent_range;
        break;
      }

      // optional .cockroach.proto.ResolveIntentRangeRequest resolve_intent_range = 14;
      case 14: {
        if (tag == 114) {
         parse_resolve_intent_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolve_intent_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_merge_response;
        break;
      }

      // optional .cockroach.proto.MergeRequest merge_response = 15;
      case 15: {
        if (tag == 122) {
         parse_merge_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_truncate_log;
        break;
      }

      // optional .cockroach.proto.TruncateLogRequest truncate_log = 16;
      case 16: {
        if (tag == 130) {
         parse_truncate_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truncate_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_lease;
        break;
      }

      // optional .cockroach.proto.LeaderLeaseRequest lease = 17;
      case 17: {
        if (tag == 138) {
         parse_lease:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lease()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_reverse_scan;
        break;
      }

      // optional .cockroach.proto.ReverseScanRequest reverse_scan = 18;
      case 18: {
        if (tag == 146) {
         parse_reverse_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reverse_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_batch;
        break;
      }

      // optional .cockroach.proto.BatchRequest batch = 30;
      case 30: {
        if (tag == 242) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftCommandUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftCommandUnion)
  return false;
#undef DO_
}

void RaftCommandUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftCommandUnion)
  // optional .cockroach.proto.GetRequest get = 1;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *value_.get_, output);
  }

  // optional .cockroach.proto.PutRequest put = 2;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.put_, output);
  }

  // optional .cockroach.proto.ConditionalPutRequest conditional_put = 3;
  if (has_conditional_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.conditional_put_, output);
  }

  // optional .cockroach.proto.IncrementRequest increment = 4;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.increment_, output);
  }

  // optional .cockroach.proto.DeleteRequest delete = 5;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.delete__, output);
  }

  // optional .cockroach.proto.DeleteRangeRequest delete_range = 6;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.delete_range_, output);
  }

  // optional .cockroach.proto.ScanRequest scan = 7;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.scan_, output);
  }

  // optional .cockroach.proto.EndTransactionRequest end_transaction = 8;
  if (has_end_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.end_transaction_, output);
  }

  // optional .cockroach.proto.RangeLookupRequest range_lookup = 9;
  if (has_range_lookup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.range_lookup_, output);
  }

  // optional .cockroach.proto.HeartbeatTxnRequest heartbeat_txn = 10;
  if (has_heartbeat_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *value_.heartbeat_txn_, output);
  }

  // optional .cockroach.proto.GCRequest gc = 11;
  if (has_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.gc_, output);
  }

  // optional .cockroach.proto.PushTxnRequest push_txn = 12;
  if (has_push_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *value_.push_txn_, output);
  }

  // optional .cockroach.proto.ResolveIntentRequest resolve_intent = 13;
  if (has_resolve_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *value_.resolve_intent_, output);
  }

  // optional .cockroach.proto.ResolveIntentRangeRequest resolve_intent_range = 14;
  if (has_resolve_intent_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *value_.resolve_intent_range_, output);
  }

  // optional .cockroach.proto.MergeRequest merge_response = 15;
  if (has_merge_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *value_.merge_response_, output);
  }

  // optional .cockroach.proto.TruncateLogRequest truncate_log = 16;
  if (has_truncate_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *value_.truncate_log_, output);
  }

  // optional .cockroach.proto.LeaderLeaseRequest lease = 17;
  if (has_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *value_.lease_, output);
  }

  // optional .cockroach.proto.ReverseScanRequest reverse_scan = 18;
  if (has_reverse_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *value_.reverse_scan_, output);
  }

  // optional .cockroach.proto.BatchRequest batch = 30;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *value_.batch_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftCommandUnion)
}

::google::protobuf::uint8* RaftCommandUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftCommandUnion)
  // optional .cockroach.proto.GetRequest get = 1;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *value_.get_, target);
  }

  // optional .cockroach.proto.PutRequest put = 2;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *value_.put_, target);
  }

  // optional .cockroach.proto.ConditionalPutRequest conditional_put = 3;
  if (has_conditional_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *value_.conditional_put_, target);
  }

  // optional .cockroach.proto.IncrementRequest increment = 4;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *value_.increment_, target);
  }

  // optional .cockroach.proto.DeleteRequest delete = 5;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *value_.delete__, target);
  }

  // optional .cockroach.proto.DeleteRangeRequest delete_range = 6;
  if (has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *value_.delete_range_, target);
  }

  // optional .cockroach.proto.ScanRequest scan = 7;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *value_.scan_, target);
  }

  // optional .cockroach.proto.EndTransactionRequest end_transaction = 8;
  if (has_end_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *value_.end_transaction_, target);
  }

  // optional .cockroach.proto.RangeLookupRequest range_lookup = 9;
  if (has_range_lookup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *value_.range_lookup_, target);
  }

  // optional .cockroach.proto.HeartbeatTxnRequest heartbeat_txn = 10;
  if (has_heartbeat_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *value_.heartbeat_txn_, target);
  }

  // optional .cockroach.proto.GCRequest gc = 11;
  if (has_gc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *value_.gc_, target);
  }

  // optional .cockroach.proto.PushTxnRequest push_txn = 12;
  if (has_push_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *value_.push_txn_, target);
  }

  // optional .cockroach.proto.ResolveIntentRequest resolve_intent = 13;
  if (has_resolve_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *value_.resolve_intent_, target);
  }

  // optional .cockroach.proto.ResolveIntentRangeRequest resolve_intent_range = 14;
  if (has_resolve_intent_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *value_.resolve_intent_range_, target);
  }

  // optional .cockroach.proto.MergeRequest merge_response = 15;
  if (has_merge_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *value_.merge_response_, target);
  }

  // optional .cockroach.proto.TruncateLogRequest truncate_log = 16;
  if (has_truncate_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *value_.truncate_log_, target);
  }

  // optional .cockroach.proto.LeaderLeaseRequest lease = 17;
  if (has_lease()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, *value_.lease_, target);
  }

  // optional .cockroach.proto.ReverseScanRequest reverse_scan = 18;
  if (has_reverse_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, *value_.reverse_scan_, target);
  }

  // optional .cockroach.proto.BatchRequest batch = 30;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *value_.batch_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftCommandUnion)
  return target;
}

int RaftCommandUnion::ByteSize() const {
  int total_size = 0;

  switch (value_case()) {
    // optional .cockroach.proto.GetRequest get = 1;
    case kGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.get_);
      break;
    }
    // optional .cockroach.proto.PutRequest put = 2;
    case kPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.put_);
      break;
    }
    // optional .cockroach.proto.ConditionalPutRequest conditional_put = 3;
    case kConditionalPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.conditional_put_);
      break;
    }
    // optional .cockroach.proto.IncrementRequest increment = 4;
    case kIncrement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.increment_);
      break;
    }
    // optional .cockroach.proto.DeleteRequest delete = 5;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete__);
      break;
    }
    // optional .cockroach.proto.DeleteRangeRequest delete_range = 6;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete_range_);
      break;
    }
    // optional .cockroach.proto.ScanRequest scan = 7;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.scan_);
      break;
    }
    // optional .cockroach.proto.EndTransactionRequest end_transaction = 8;
    case kEndTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.end_transaction_);
      break;
    }
    // optional .cockroach.proto.RangeLookupRequest range_lookup = 9;
    case kRangeLookup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.range_lookup_);
      break;
    }
    // optional .cockroach.proto.HeartbeatTxnRequest heartbeat_txn = 10;
    case kHeartbeatTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.heartbeat_txn_);
      break;
    }
    // optional .cockroach.proto.GCRequest gc = 11;
    case kGc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.gc_);
      break;
    }
    // optional .cockroach.proto.PushTxnRequest push_txn = 12;
    case kPushTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.push_txn_);
      break;
    }
    // optional .cockroach.proto.ResolveIntentRequest resolve_intent = 13;
    case kResolveIntent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.resolve_intent_);
      break;
    }
    // optional .cockroach.proto.ResolveIntentRangeRequest resolve_intent_range = 14;
    case kResolveIntentRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.resolve_intent_range_);
      break;
    }
    // optional .cockroach.proto.MergeRequest merge_response = 15;
    case kMergeResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.merge_response_);
      break;
    }
    // optional .cockroach.proto.TruncateLogRequest truncate_log = 16;
    case kTruncateLog: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.truncate_log_);
      break;
    }
    // optional .cockroach.proto.LeaderLeaseRequest lease = 17;
    case kLease: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.lease_);
      break;
    }
    // optional .cockroach.proto.ReverseScanRequest reverse_scan = 18;
    case kReverseScan: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.reverse_scan_);
      break;
    }
    // optional .cockroach.proto.BatchRequest batch = 30;
    case kBatch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.batch_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCommandUnion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftCommandUnion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftCommandUnion>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftCommandUnion::MergeFrom(const RaftCommandUnion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_case()) {
    case kGet: {
      mutable_get()->::cockroach::proto::GetRequest::MergeFrom(from.get());
      break;
    }
    case kPut: {
      mutable_put()->::cockroach::proto::PutRequest::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::proto::ConditionalPutRequest::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::proto::IncrementRequest::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::proto::DeleteRequest::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::proto::DeleteRangeRequest::MergeFrom(from.delete_range());
      break;
    }
    case kScan: {
      mutable_scan()->::cockroach::proto::ScanRequest::MergeFrom(from.scan());
      break;
    }
    case kEndTransaction: {
      mutable_end_transaction()->::cockroach::proto::EndTransactionRequest::MergeFrom(from.end_transaction());
      break;
    }
    case kRangeLookup: {
      mutable_range_lookup()->::cockroach::proto::RangeLookupRequest::MergeFrom(from.range_lookup());
      break;
    }
    case kHeartbeatTxn: {
      mutable_heartbeat_txn()->::cockroach::proto::HeartbeatTxnRequest::MergeFrom(from.heartbeat_txn());
      break;
    }
    case kGc: {
      mutable_gc()->::cockroach::proto::GCRequest::MergeFrom(from.gc());
      break;
    }
    case kPushTxn: {
      mutable_push_txn()->::cockroach::proto::PushTxnRequest::MergeFrom(from.push_txn());
      break;
    }
    case kResolveIntent: {
      mutable_resolve_intent()->::cockroach::proto::ResolveIntentRequest::MergeFrom(from.resolve_intent());
      break;
    }
    case kResolveIntentRange: {
      mutable_resolve_intent_range()->::cockroach::proto::ResolveIntentRangeRequest::MergeFrom(from.resolve_intent_range());
      break;
    }
    case kMergeResponse: {
      mutable_merge_response()->::cockroach::proto::MergeRequest::MergeFrom(from.merge_response());
      break;
    }
    case kTruncateLog: {
      mutable_truncate_log()->::cockroach::proto::TruncateLogRequest::MergeFrom(from.truncate_log());
      break;
    }
    case kLease: {
      mutable_lease()->::cockroach::proto::LeaderLeaseRequest::MergeFrom(from.lease());
      break;
    }
    case kReverseScan: {
      mutable_reverse_scan()->::cockroach::proto::ReverseScanRequest::MergeFrom(from.reverse_scan());
      break;
    }
    case kBatch: {
      mutable_batch()->::cockroach::proto::BatchRequest::MergeFrom(from.batch());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftCommandUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCommandUnion::CopyFrom(const RaftCommandUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCommandUnion::IsInitialized() const {

  return true;
}

void RaftCommandUnion::Swap(RaftCommandUnion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCommandUnion::InternalSwap(RaftCommandUnion* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftCommandUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCommandUnion_descriptor_;
  metadata.reflection = RaftCommandUnion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftCommandUnion

// optional .cockroach.proto.GetRequest get = 1;
bool RaftCommandUnion::has_get() const {
  return value_case() == kGet;
}
void RaftCommandUnion::set_has_get() {
  _oneof_case_[0] = kGet;
}
void RaftCommandUnion::clear_get() {
  if (has_get()) {
    delete value_.get_;
    clear_has_value();
  }
}
 const ::cockroach::proto::GetRequest& RaftCommandUnion::get() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.get)
  return has_get() ? *value_.get_
                      : ::cockroach::proto::GetRequest::default_instance();
}
 ::cockroach::proto::GetRequest* RaftCommandUnion::mutable_get() {
  if (!has_get()) {
    clear_value();
    set_has_get();
    value_.get_ = new ::cockroach::proto::GetRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.get)
  return value_.get_;
}
 ::cockroach::proto::GetRequest* RaftCommandUnion::release_get() {
  if (has_get()) {
    clear_has_value();
    ::cockroach::proto::GetRequest* temp = value_.get_;
    value_.get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_get(::cockroach::proto::GetRequest* get) {
  clear_value();
  if (get) {
    set_has_get();
    value_.get_ = get;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.get)
}

// optional .cockroach.proto.PutRequest put = 2;
bool RaftCommandUnion::has_put() const {
  return value_case() == kPut;
}
void RaftCommandUnion::set_has_put() {
  _oneof_case_[0] = kPut;
}
void RaftCommandUnion::clear_put() {
  if (has_put()) {
    delete value_.put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::PutRequest& RaftCommandUnion::put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.put)
  return has_put() ? *value_.put_
                      : ::cockroach::proto::PutRequest::default_instance();
}
 ::cockroach::proto::PutRequest* RaftCommandUnion::mutable_put() {
  if (!has_put()) {
    clear_value();
    set_has_put();
    value_.put_ = new ::cockroach::proto::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.put)
  return value_.put_;
}
 ::cockroach::proto::PutRequest* RaftCommandUnion::release_put() {
  if (has_put()) {
    clear_has_value();
    ::cockroach::proto::PutRequest* temp = value_.put_;
    value_.put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_put(::cockroach::proto::PutRequest* put) {
  clear_value();
  if (put) {
    set_has_put();
    value_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.put)
}

// optional .cockroach.proto.ConditionalPutRequest conditional_put = 3;
bool RaftCommandUnion::has_conditional_put() const {
  return value_case() == kConditionalPut;
}
void RaftCommandUnion::set_has_conditional_put() {
  _oneof_case_[0] = kConditionalPut;
}
void RaftCommandUnion::clear_conditional_put() {
  if (has_conditional_put()) {
    delete value_.conditional_put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ConditionalPutRequest& RaftCommandUnion::conditional_put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.conditional_put)
  return has_conditional_put() ? *value_.conditional_put_
                      : ::cockroach::proto::ConditionalPutRequest::default_instance();
}
 ::cockroach::proto::ConditionalPutRequest* RaftCommandUnion::mutable_conditional_put() {
  if (!has_conditional_put()) {
    clear_value();
    set_has_conditional_put();
    value_.conditional_put_ = new ::cockroach::proto::ConditionalPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.conditional_put)
  return value_.conditional_put_;
}
 ::cockroach::proto::ConditionalPutRequest* RaftCommandUnion::release_conditional_put() {
  if (has_conditional_put()) {
    clear_has_value();
    ::cockroach::proto::ConditionalPutRequest* temp = value_.conditional_put_;
    value_.conditional_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_conditional_put(::cockroach::proto::ConditionalPutRequest* conditional_put) {
  clear_value();
  if (conditional_put) {
    set_has_conditional_put();
    value_.conditional_put_ = conditional_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.conditional_put)
}

// optional .cockroach.proto.IncrementRequest increment = 4;
bool RaftCommandUnion::has_increment() const {
  return value_case() == kIncrement;
}
void RaftCommandUnion::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
void RaftCommandUnion::clear_increment() {
  if (has_increment()) {
    delete value_.increment_;
    clear_has_value();
  }
}
 const ::cockroach::proto::IncrementRequest& RaftCommandUnion::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.increment)
  return has_increment() ? *value_.increment_
                      : ::cockroach::proto::IncrementRequest::default_instance();
}
 ::cockroach::proto::IncrementRequest* RaftCommandUnion::mutable_increment() {
  if (!has_increment()) {
    clear_value();
    set_has_increment();
    value_.increment_ = new ::cockroach::proto::IncrementRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.increment)
  return value_.increment_;
}
 ::cockroach::proto::IncrementRequest* RaftCommandUnion::release_increment() {
  if (has_increment()) {
    clear_has_value();
    ::cockroach::proto::IncrementRequest* temp = value_.increment_;
    value_.increment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_increment(::cockroach::proto::IncrementRequest* increment) {
  clear_value();
  if (increment) {
    set_has_increment();
    value_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.increment)
}

// optional .cockroach.proto.DeleteRequest delete = 5;
bool RaftCommandUnion::has_delete_() const {
  return value_case() == kDelete;
}
void RaftCommandUnion::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
void RaftCommandUnion::clear_delete_() {
  if (has_delete_()) {
    delete value_.delete__;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteRequest& RaftCommandUnion::delete_() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.delete)
  return has_delete_() ? *value_.delete__
                      : ::cockroach::proto::DeleteRequest::default_instance();
}
 ::cockroach::proto::DeleteRequest* RaftCommandUnion::mutable_delete_() {
  if (!has_delete_()) {
    clear_value();
    set_has_delete_();
    value_.delete__ = new ::cockroach::proto::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.delete)
  return value_.delete__;
}
 ::cockroach::proto::DeleteRequest* RaftCommandUnion::release_delete_() {
  if (has_delete_()) {
    clear_has_value();
    ::cockroach::proto::DeleteRequest* temp = value_.delete__;
    value_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_delete_(::cockroach::proto::DeleteRequest* delete_) {
  clear_value();
  if (delete_) {
    set_has_delete_();
    value_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.delete)
}

// optional .cockroach.proto.DeleteRangeRequest delete_range = 6;
bool RaftCommandUnion::has_delete_range() const {
  return value_case() == kDeleteRange;
}
void RaftCommandUnion::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
void RaftCommandUnion::clear_delete_range() {
  if (has_delete_range()) {
    delete value_.delete_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteRangeRequest& RaftCommandUnion::delete_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.delete_range)
  return has_delete_range() ? *value_.delete_range_
                      : ::cockroach::proto::DeleteRangeRequest::default_instance();
}
 ::cockroach::proto::DeleteRangeRequest* RaftCommandUnion::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_value();
    set_has_delete_range();
    value_.delete_range_ = new ::cockroach::proto::DeleteRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.delete_range)
  return value_.delete_range_;
}
 ::cockroach::proto::DeleteRangeRequest* RaftCommandUnion::release_delete_range() {
  if (has_delete_range()) {
    clear_has_value();
    ::cockroach::proto::DeleteRangeRequest* temp = value_.delete_range_;
    value_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_delete_range(::cockroach::proto::DeleteRangeRequest* delete_range) {
  clear_value();
  if (delete_range) {
    set_has_delete_range();
    value_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.delete_range)
}

// optional .cockroach.proto.ScanRequest scan = 7;
bool RaftCommandUnion::has_scan() const {
  return value_case() == kScan;
}
void RaftCommandUnion::set_has_scan() {
  _oneof_case_[0] = kScan;
}
void RaftCommandUnion::clear_scan() {
  if (has_scan()) {
    delete value_.scan_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ScanRequest& RaftCommandUnion::scan() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.scan)
  return has_scan() ? *value_.scan_
                      : ::cockroach::proto::ScanRequest::default_instance();
}
 ::cockroach::proto::ScanRequest* RaftCommandUnion::mutable_scan() {
  if (!has_scan()) {
    clear_value();
    set_has_scan();
    value_.scan_ = new ::cockroach::proto::ScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.scan)
  return value_.scan_;
}
 ::cockroach::proto::ScanRequest* RaftCommandUnion::release_scan() {
  if (has_scan()) {
    clear_has_value();
    ::cockroach::proto::ScanRequest* temp = value_.scan_;
    value_.scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_scan(::cockroach::proto::ScanRequest* scan) {
  clear_value();
  if (scan) {
    set_has_scan();
    value_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.scan)
}

// optional .cockroach.proto.EndTransactionRequest end_transaction = 8;
bool RaftCommandUnion::has_end_transaction() const {
  return value_case() == kEndTransaction;
}
void RaftCommandUnion::set_has_end_transaction() {
  _oneof_case_[0] = kEndTransaction;
}
void RaftCommandUnion::clear_end_transaction() {
  if (has_end_transaction()) {
    delete value_.end_transaction_;
    clear_has_value();
  }
}
 const ::cockroach::proto::EndTransactionRequest& RaftCommandUnion::end_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.end_transaction)
  return has_end_transaction() ? *value_.end_transaction_
                      : ::cockroach::proto::EndTransactionRequest::default_instance();
}
 ::cockroach::proto::EndTransactionRequest* RaftCommandUnion::mutable_end_transaction() {
  if (!has_end_transaction()) {
    clear_value();
    set_has_end_transaction();
    value_.end_transaction_ = new ::cockroach::proto::EndTransactionRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.end_transaction)
  return value_.end_transaction_;
}
 ::cockroach::proto::EndTransactionRequest* RaftCommandUnion::release_end_transaction() {
  if (has_end_transaction()) {
    clear_has_value();
    ::cockroach::proto::EndTransactionRequest* temp = value_.end_transaction_;
    value_.end_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_end_transaction(::cockroach::proto::EndTransactionRequest* end_transaction) {
  clear_value();
  if (end_transaction) {
    set_has_end_transaction();
    value_.end_transaction_ = end_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.end_transaction)
}

// optional .cockroach.proto.RangeLookupRequest range_lookup = 9;
bool RaftCommandUnion::has_range_lookup() const {
  return value_case() == kRangeLookup;
}
void RaftCommandUnion::set_has_range_lookup() {
  _oneof_case_[0] = kRangeLookup;
}
void RaftCommandUnion::clear_range_lookup() {
  if (has_range_lookup()) {
    delete value_.range_lookup_;
    clear_has_value();
  }
}
 const ::cockroach::proto::RangeLookupRequest& RaftCommandUnion::range_lookup() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.range_lookup)
  return has_range_lookup() ? *value_.range_lookup_
                      : ::cockroach::proto::RangeLookupRequest::default_instance();
}
 ::cockroach::proto::RangeLookupRequest* RaftCommandUnion::mutable_range_lookup() {
  if (!has_range_lookup()) {
    clear_value();
    set_has_range_lookup();
    value_.range_lookup_ = new ::cockroach::proto::RangeLookupRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.range_lookup)
  return value_.range_lookup_;
}
 ::cockroach::proto::RangeLookupRequest* RaftCommandUnion::release_range_lookup() {
  if (has_range_lookup()) {
    clear_has_value();
    ::cockroach::proto::RangeLookupRequest* temp = value_.range_lookup_;
    value_.range_lookup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_range_lookup(::cockroach::proto::RangeLookupRequest* range_lookup) {
  clear_value();
  if (range_lookup) {
    set_has_range_lookup();
    value_.range_lookup_ = range_lookup;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.range_lookup)
}

// optional .cockroach.proto.HeartbeatTxnRequest heartbeat_txn = 10;
bool RaftCommandUnion::has_heartbeat_txn() const {
  return value_case() == kHeartbeatTxn;
}
void RaftCommandUnion::set_has_heartbeat_txn() {
  _oneof_case_[0] = kHeartbeatTxn;
}
void RaftCommandUnion::clear_heartbeat_txn() {
  if (has_heartbeat_txn()) {
    delete value_.heartbeat_txn_;
    clear_has_value();
  }
}
 const ::cockroach::proto::HeartbeatTxnRequest& RaftCommandUnion::heartbeat_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.heartbeat_txn)
  return has_heartbeat_txn() ? *value_.heartbeat_txn_
                      : ::cockroach::proto::HeartbeatTxnRequest::default_instance();
}
 ::cockroach::proto::HeartbeatTxnRequest* RaftCommandUnion::mutable_heartbeat_txn() {
  if (!has_heartbeat_txn()) {
    clear_value();
    set_has_heartbeat_txn();
    value_.heartbeat_txn_ = new ::cockroach::proto::HeartbeatTxnRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.heartbeat_txn)
  return value_.heartbeat_txn_;
}
 ::cockroach::proto::HeartbeatTxnRequest* RaftCommandUnion::release_heartbeat_txn() {
  if (has_heartbeat_txn()) {
    clear_has_value();
    ::cockroach::proto::HeartbeatTxnRequest* temp = value_.heartbeat_txn_;
    value_.heartbeat_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_heartbeat_txn(::cockroach::proto::HeartbeatTxnRequest* heartbeat_txn) {
  clear_value();
  if (heartbeat_txn) {
    set_has_heartbeat_txn();
    value_.heartbeat_txn_ = heartbeat_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.heartbeat_txn)
}

// optional .cockroach.proto.GCRequest gc = 11;
bool RaftCommandUnion::has_gc() const {
  return value_case() == kGc;
}
void RaftCommandUnion::set_has_gc() {
  _oneof_case_[0] = kGc;
}
void RaftCommandUnion::clear_gc() {
  if (has_gc()) {
    delete value_.gc_;
    clear_has_value();
  }
}
 const ::cockroach::proto::GCRequest& RaftCommandUnion::gc() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.gc)
  return has_gc() ? *value_.gc_
                      : ::cockroach::proto::GCRequest::default_instance();
}
 ::cockroach::proto::GCRequest* RaftCommandUnion::mutable_gc() {
  if (!has_gc()) {
    clear_value();
    set_has_gc();
    value_.gc_ = new ::cockroach::proto::GCRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.gc)
  return value_.gc_;
}
 ::cockroach::proto::GCRequest* RaftCommandUnion::release_gc() {
  if (has_gc()) {
    clear_has_value();
    ::cockroach::proto::GCRequest* temp = value_.gc_;
    value_.gc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_gc(::cockroach::proto::GCRequest* gc) {
  clear_value();
  if (gc) {
    set_has_gc();
    value_.gc_ = gc;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.gc)
}

// optional .cockroach.proto.PushTxnRequest push_txn = 12;
bool RaftCommandUnion::has_push_txn() const {
  return value_case() == kPushTxn;
}
void RaftCommandUnion::set_has_push_txn() {
  _oneof_case_[0] = kPushTxn;
}
void RaftCommandUnion::clear_push_txn() {
  if (has_push_txn()) {
    delete value_.push_txn_;
    clear_has_value();
  }
}
 const ::cockroach::proto::PushTxnRequest& RaftCommandUnion::push_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.push_txn)
  return has_push_txn() ? *value_.push_txn_
                      : ::cockroach::proto::PushTxnRequest::default_instance();
}
 ::cockroach::proto::PushTxnRequest* RaftCommandUnion::mutable_push_txn() {
  if (!has_push_txn()) {
    clear_value();
    set_has_push_txn();
    value_.push_txn_ = new ::cockroach::proto::PushTxnRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.push_txn)
  return value_.push_txn_;
}
 ::cockroach::proto::PushTxnRequest* RaftCommandUnion::release_push_txn() {
  if (has_push_txn()) {
    clear_has_value();
    ::cockroach::proto::PushTxnRequest* temp = value_.push_txn_;
    value_.push_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_push_txn(::cockroach::proto::PushTxnRequest* push_txn) {
  clear_value();
  if (push_txn) {
    set_has_push_txn();
    value_.push_txn_ = push_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.push_txn)
}

// optional .cockroach.proto.ResolveIntentRequest resolve_intent = 13;
bool RaftCommandUnion::has_resolve_intent() const {
  return value_case() == kResolveIntent;
}
void RaftCommandUnion::set_has_resolve_intent() {
  _oneof_case_[0] = kResolveIntent;
}
void RaftCommandUnion::clear_resolve_intent() {
  if (has_resolve_intent()) {
    delete value_.resolve_intent_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ResolveIntentRequest& RaftCommandUnion::resolve_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.resolve_intent)
  return has_resolve_intent() ? *value_.resolve_intent_
                      : ::cockroach::proto::ResolveIntentRequest::default_instance();
}
 ::cockroach::proto::ResolveIntentRequest* RaftCommandUnion::mutable_resolve_intent() {
  if (!has_resolve_intent()) {
    clear_value();
    set_has_resolve_intent();
    value_.resolve_intent_ = new ::cockroach::proto::ResolveIntentRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.resolve_intent)
  return value_.resolve_intent_;
}
 ::cockroach::proto::ResolveIntentRequest* RaftCommandUnion::release_resolve_intent() {
  if (has_resolve_intent()) {
    clear_has_value();
    ::cockroach::proto::ResolveIntentRequest* temp = value_.resolve_intent_;
    value_.resolve_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_resolve_intent(::cockroach::proto::ResolveIntentRequest* resolve_intent) {
  clear_value();
  if (resolve_intent) {
    set_has_resolve_intent();
    value_.resolve_intent_ = resolve_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.resolve_intent)
}

// optional .cockroach.proto.ResolveIntentRangeRequest resolve_intent_range = 14;
bool RaftCommandUnion::has_resolve_intent_range() const {
  return value_case() == kResolveIntentRange;
}
void RaftCommandUnion::set_has_resolve_intent_range() {
  _oneof_case_[0] = kResolveIntentRange;
}
void RaftCommandUnion::clear_resolve_intent_range() {
  if (has_resolve_intent_range()) {
    delete value_.resolve_intent_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ResolveIntentRangeRequest& RaftCommandUnion::resolve_intent_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.resolve_intent_range)
  return has_resolve_intent_range() ? *value_.resolve_intent_range_
                      : ::cockroach::proto::ResolveIntentRangeRequest::default_instance();
}
 ::cockroach::proto::ResolveIntentRangeRequest* RaftCommandUnion::mutable_resolve_intent_range() {
  if (!has_resolve_intent_range()) {
    clear_value();
    set_has_resolve_intent_range();
    value_.resolve_intent_range_ = new ::cockroach::proto::ResolveIntentRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.resolve_intent_range)
  return value_.resolve_intent_range_;
}
 ::cockroach::proto::ResolveIntentRangeRequest* RaftCommandUnion::release_resolve_intent_range() {
  if (has_resolve_intent_range()) {
    clear_has_value();
    ::cockroach::proto::ResolveIntentRangeRequest* temp = value_.resolve_intent_range_;
    value_.resolve_intent_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_resolve_intent_range(::cockroach::proto::ResolveIntentRangeRequest* resolve_intent_range) {
  clear_value();
  if (resolve_intent_range) {
    set_has_resolve_intent_range();
    value_.resolve_intent_range_ = resolve_intent_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.resolve_intent_range)
}

// optional .cockroach.proto.MergeRequest merge_response = 15;
bool RaftCommandUnion::has_merge_response() const {
  return value_case() == kMergeResponse;
}
void RaftCommandUnion::set_has_merge_response() {
  _oneof_case_[0] = kMergeResponse;
}
void RaftCommandUnion::clear_merge_response() {
  if (has_merge_response()) {
    delete value_.merge_response_;
    clear_has_value();
  }
}
 const ::cockroach::proto::MergeRequest& RaftCommandUnion::merge_response() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.merge_response)
  return has_merge_response() ? *value_.merge_response_
                      : ::cockroach::proto::MergeRequest::default_instance();
}
 ::cockroach::proto::MergeRequest* RaftCommandUnion::mutable_merge_response() {
  if (!has_merge_response()) {
    clear_value();
    set_has_merge_response();
    value_.merge_response_ = new ::cockroach::proto::MergeRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.merge_response)
  return value_.merge_response_;
}
 ::cockroach::proto::MergeRequest* RaftCommandUnion::release_merge_response() {
  if (has_merge_response()) {
    clear_has_value();
    ::cockroach::proto::MergeRequest* temp = value_.merge_response_;
    value_.merge_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_merge_response(::cockroach::proto::MergeRequest* merge_response) {
  clear_value();
  if (merge_response) {
    set_has_merge_response();
    value_.merge_response_ = merge_response;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.merge_response)
}

// optional .cockroach.proto.TruncateLogRequest truncate_log = 16;
bool RaftCommandUnion::has_truncate_log() const {
  return value_case() == kTruncateLog;
}
void RaftCommandUnion::set_has_truncate_log() {
  _oneof_case_[0] = kTruncateLog;
}
void RaftCommandUnion::clear_truncate_log() {
  if (has_truncate_log()) {
    delete value_.truncate_log_;
    clear_has_value();
  }
}
 const ::cockroach::proto::TruncateLogRequest& RaftCommandUnion::truncate_log() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.truncate_log)
  return has_truncate_log() ? *value_.truncate_log_
                      : ::cockroach::proto::TruncateLogRequest::default_instance();
}
 ::cockroach::proto::TruncateLogRequest* RaftCommandUnion::mutable_truncate_log() {
  if (!has_truncate_log()) {
    clear_value();
    set_has_truncate_log();
    value_.truncate_log_ = new ::cockroach::proto::TruncateLogRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.truncate_log)
  return value_.truncate_log_;
}
 ::cockroach::proto::TruncateLogRequest* RaftCommandUnion::release_truncate_log() {
  if (has_truncate_log()) {
    clear_has_value();
    ::cockroach::proto::TruncateLogRequest* temp = value_.truncate_log_;
    value_.truncate_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_truncate_log(::cockroach::proto::TruncateLogRequest* truncate_log) {
  clear_value();
  if (truncate_log) {
    set_has_truncate_log();
    value_.truncate_log_ = truncate_log;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.truncate_log)
}

// optional .cockroach.proto.LeaderLeaseRequest lease = 17;
bool RaftCommandUnion::has_lease() const {
  return value_case() == kLease;
}
void RaftCommandUnion::set_has_lease() {
  _oneof_case_[0] = kLease;
}
void RaftCommandUnion::clear_lease() {
  if (has_lease()) {
    delete value_.lease_;
    clear_has_value();
  }
}
 const ::cockroach::proto::LeaderLeaseRequest& RaftCommandUnion::lease() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.lease)
  return has_lease() ? *value_.lease_
                      : ::cockroach::proto::LeaderLeaseRequest::default_instance();
}
 ::cockroach::proto::LeaderLeaseRequest* RaftCommandUnion::mutable_lease() {
  if (!has_lease()) {
    clear_value();
    set_has_lease();
    value_.lease_ = new ::cockroach::proto::LeaderLeaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.lease)
  return value_.lease_;
}
 ::cockroach::proto::LeaderLeaseRequest* RaftCommandUnion::release_lease() {
  if (has_lease()) {
    clear_has_value();
    ::cockroach::proto::LeaderLeaseRequest* temp = value_.lease_;
    value_.lease_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_lease(::cockroach::proto::LeaderLeaseRequest* lease) {
  clear_value();
  if (lease) {
    set_has_lease();
    value_.lease_ = lease;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.lease)
}

// optional .cockroach.proto.ReverseScanRequest reverse_scan = 18;
bool RaftCommandUnion::has_reverse_scan() const {
  return value_case() == kReverseScan;
}
void RaftCommandUnion::set_has_reverse_scan() {
  _oneof_case_[0] = kReverseScan;
}
void RaftCommandUnion::clear_reverse_scan() {
  if (has_reverse_scan()) {
    delete value_.reverse_scan_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ReverseScanRequest& RaftCommandUnion::reverse_scan() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.reverse_scan)
  return has_reverse_scan() ? *value_.reverse_scan_
                      : ::cockroach::proto::ReverseScanRequest::default_instance();
}
 ::cockroach::proto::ReverseScanRequest* RaftCommandUnion::mutable_reverse_scan() {
  if (!has_reverse_scan()) {
    clear_value();
    set_has_reverse_scan();
    value_.reverse_scan_ = new ::cockroach::proto::ReverseScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.reverse_scan)
  return value_.reverse_scan_;
}
 ::cockroach::proto::ReverseScanRequest* RaftCommandUnion::release_reverse_scan() {
  if (has_reverse_scan()) {
    clear_has_value();
    ::cockroach::proto::ReverseScanRequest* temp = value_.reverse_scan_;
    value_.reverse_scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_reverse_scan(::cockroach::proto::ReverseScanRequest* reverse_scan) {
  clear_value();
  if (reverse_scan) {
    set_has_reverse_scan();
    value_.reverse_scan_ = reverse_scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.reverse_scan)
}

// optional .cockroach.proto.BatchRequest batch = 30;
bool RaftCommandUnion::has_batch() const {
  return value_case() == kBatch;
}
void RaftCommandUnion::set_has_batch() {
  _oneof_case_[0] = kBatch;
}
void RaftCommandUnion::clear_batch() {
  if (has_batch()) {
    delete value_.batch_;
    clear_has_value();
  }
}
 const ::cockroach::proto::BatchRequest& RaftCommandUnion::batch() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommandUnion.batch)
  return has_batch() ? *value_.batch_
                      : ::cockroach::proto::BatchRequest::default_instance();
}
 ::cockroach::proto::BatchRequest* RaftCommandUnion::mutable_batch() {
  if (!has_batch()) {
    clear_value();
    set_has_batch();
    value_.batch_ = new ::cockroach::proto::BatchRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommandUnion.batch)
  return value_.batch_;
}
 ::cockroach::proto::BatchRequest* RaftCommandUnion::release_batch() {
  if (has_batch()) {
    clear_has_value();
    ::cockroach::proto::BatchRequest* temp = value_.batch_;
    value_.batch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void RaftCommandUnion::set_allocated_batch(::cockroach::proto::BatchRequest* batch) {
  clear_value();
  if (batch) {
    set_has_batch();
    value_.batch_ = batch;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommandUnion.batch)
}

bool RaftCommandUnion::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void RaftCommandUnion::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
RaftCommandUnion::ValueCase RaftCommandUnion::value_case() const {
  return RaftCommandUnion::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RaftCommand::kRangeIdFieldNumber;
const int RaftCommand::kOriginNodeIdFieldNumber;
const int RaftCommand::kCmdFieldNumber;
#endif  // !_MSC_VER

RaftCommand::RaftCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftCommand)
}

void RaftCommand::InitAsDefaultInstance() {
  cmd_ = const_cast< ::cockroach::proto::RaftCommandUnion*>(&::cockroach::proto::RaftCommandUnion::default_instance());
}

RaftCommand::RaftCommand(const RaftCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftCommand)
}

void RaftCommand::SharedCtor() {
  _cached_size_ = 0;
  range_id_ = GOOGLE_LONGLONG(0);
  origin_node_id_ = GOOGLE_ULONGLONG(0);
  cmd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftCommand::~RaftCommand() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftCommand)
  SharedDtor();
}

void RaftCommand::SharedDtor() {
  if (this != default_instance_) {
    delete cmd_;
  }
}

void RaftCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCommand_descriptor_;
}

const RaftCommand& RaftCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftCommand* RaftCommand::default_instance_ = NULL;

RaftCommand* RaftCommand::New(::google::protobuf::Arena* arena) const {
  RaftCommand* n = new RaftCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftCommand::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftCommand*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(range_id_, origin_node_id_);
    if (has_cmd()) {
      if (cmd_ != NULL) cmd_->::cockroach::proto::RaftCommandUnion::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 range_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
          set_has_range_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_origin_node_id;
        break;
      }

      // optional uint64 origin_node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_origin_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &origin_node_id_)));
          set_has_origin_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd;
        break;
      }

      // optional .cockroach.proto.RaftCommandUnion cmd = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftCommand)
  return false;
#undef DO_
}

void RaftCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftCommand)
  // optional int64 range_id = 1;
  if (has_range_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  // optional uint64 origin_node_id = 2;
  if (has_origin_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->origin_node_id(), output);
  }

  // optional .cockroach.proto.RaftCommandUnion cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cmd_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftCommand)
}

::google::protobuf::uint8* RaftCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftCommand)
  // optional int64 range_id = 1;
  if (has_range_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->range_id(), target);
  }

  // optional uint64 origin_node_id = 2;
  if (has_origin_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->origin_node_id(), target);
  }

  // optional .cockroach.proto.RaftCommandUnion cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->cmd_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftCommand)
  return target;
}

int RaftCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int64 range_id = 1;
    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

    // optional uint64 origin_node_id = 2;
    if (has_origin_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->origin_node_id());
    }

    // optional .cockroach.proto.RaftCommandUnion cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCommand::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftCommand>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftCommand::MergeFrom(const RaftCommand& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range_id()) {
      set_range_id(from.range_id());
    }
    if (from.has_origin_node_id()) {
      set_origin_node_id(from.origin_node_id());
    }
    if (from.has_cmd()) {
      mutable_cmd()->::cockroach::proto::RaftCommandUnion::MergeFrom(from.cmd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCommand::CopyFrom(const RaftCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCommand::IsInitialized() const {

  return true;
}

void RaftCommand::Swap(RaftCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCommand::InternalSwap(RaftCommand* other) {
  std::swap(range_id_, other->range_id_);
  std::swap(origin_node_id_, other->origin_node_id_);
  std::swap(cmd_, other->cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCommand_descriptor_;
  metadata.reflection = RaftCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftCommand

// optional int64 range_id = 1;
bool RaftCommand::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftCommand::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftCommand::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftCommand::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
 ::google::protobuf::int64 RaftCommand::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommand.range_id)
  return range_id_;
}
 void RaftCommand::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftCommand.range_id)
}

// optional uint64 origin_node_id = 2;
bool RaftCommand::has_origin_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftCommand::set_has_origin_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftCommand::clear_has_origin_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftCommand::clear_origin_node_id() {
  origin_node_id_ = GOOGLE_ULONGLONG(0);
  clear_has_origin_node_id();
}
 ::google::protobuf::uint64 RaftCommand::origin_node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommand.origin_node_id)
  return origin_node_id_;
}
 void RaftCommand::set_origin_node_id(::google::protobuf::uint64 value) {
  set_has_origin_node_id();
  origin_node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftCommand.origin_node_id)
}

// optional .cockroach.proto.RaftCommandUnion cmd = 3;
bool RaftCommand::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RaftCommand::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
void RaftCommand::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
void RaftCommand::clear_cmd() {
  if (cmd_ != NULL) cmd_->::cockroach::proto::RaftCommandUnion::Clear();
  clear_has_cmd();
}
 const ::cockroach::proto::RaftCommandUnion& RaftCommand::cmd() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommand.cmd)
  return cmd_ != NULL ? *cmd_ : *default_instance_->cmd_;
}
 ::cockroach::proto::RaftCommandUnion* RaftCommand::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == NULL) {
    cmd_ = new ::cockroach::proto::RaftCommandUnion;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommand.cmd)
  return cmd_;
}
 ::cockroach::proto::RaftCommandUnion* RaftCommand::release_cmd() {
  clear_has_cmd();
  ::cockroach::proto::RaftCommandUnion* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
 void RaftCommand::set_allocated_cmd(::cockroach::proto::RaftCommandUnion* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommand.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RaftMessageRequest::kGroupIdFieldNumber;
const int RaftMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

RaftMessageRequest::RaftMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftMessageRequest)
}

void RaftMessageRequest::InitAsDefaultInstance() {
}

RaftMessageRequest::RaftMessageRequest(const RaftMessageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftMessageRequest)
}

void RaftMessageRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftMessageRequest::~RaftMessageRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftMessageRequest)
  SharedDtor();
}

void RaftMessageRequest::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RaftMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessageRequest_descriptor_;
}

const RaftMessageRequest& RaftMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftMessageRequest* RaftMessageRequest::default_instance_ = NULL;

RaftMessageRequest* RaftMessageRequest::New(::google::protobuf::Arena* arena) const {
  RaftMessageRequest* n = new RaftMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    group_id_ = GOOGLE_ULONGLONG(0);
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftMessageRequest)
  return false;
#undef DO_
}

void RaftMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftMessageRequest)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftMessageRequest)
}

::google::protobuf::uint8* RaftMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftMessageRequest)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftMessageRequest)
  return target;
}

int RaftMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional bytes msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftMessageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftMessageRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftMessageRequest::MergeFrom(const RaftMessageRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessageRequest::CopyFrom(const RaftMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessageRequest::IsInitialized() const {

  return true;
}

void RaftMessageRequest::Swap(RaftMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftMessageRequest::InternalSwap(RaftMessageRequest* other) {
  std::swap(group_id_, other->group_id_);
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftMessageRequest_descriptor_;
  metadata.reflection = RaftMessageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftMessageRequest

// optional uint64 group_id = 1;
bool RaftMessageRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftMessageRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftMessageRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftMessageRequest::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
 ::google::protobuf::uint64 RaftMessageRequest::group_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftMessageRequest.group_id)
  return group_id_;
}
 void RaftMessageRequest::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftMessageRequest.group_id)
}

// optional bytes msg = 2;
bool RaftMessageRequest::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftMessageRequest::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftMessageRequest::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftMessageRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& RaftMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftMessageRequest.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftMessageRequest::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftMessageRequest.msg)
}
 void RaftMessageRequest::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RaftMessageRequest.msg)
}
 void RaftMessageRequest::set_msg(const void* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RaftMessageRequest.msg)
}
 ::std::string* RaftMessageRequest::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftMessageRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftMessageRequest::release_msg() {
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftMessageRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftMessageRequest.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RaftMessageResponse::RaftMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftMessageResponse)
}

void RaftMessageResponse::InitAsDefaultInstance() {
}

RaftMessageResponse::RaftMessageResponse(const RaftMessageResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftMessageResponse)
}

void RaftMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftMessageResponse::~RaftMessageResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftMessageResponse)
  SharedDtor();
}

void RaftMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessageResponse_descriptor_;
}

const RaftMessageResponse& RaftMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftMessageResponse* RaftMessageResponse::default_instance_ = NULL;

RaftMessageResponse* RaftMessageResponse::New(::google::protobuf::Arena* arena) const {
  RaftMessageResponse* n = new RaftMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftMessageResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftMessageResponse)
  return false;
#undef DO_
}

void RaftMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftMessageResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftMessageResponse)
}

::google::protobuf::uint8* RaftMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftMessageResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftMessageResponse)
  return target;
}

int RaftMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftMessageResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftMessageResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftMessageResponse::MergeFrom(const RaftMessageResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessageResponse::CopyFrom(const RaftMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessageResponse::IsInitialized() const {

  return true;
}

void RaftMessageResponse::Swap(RaftMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftMessageResponse::InternalSwap(RaftMessageResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftMessageResponse_descriptor_;
  metadata.reflection = RaftMessageResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftMessageResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalTimeSeriesData::kStartTimestampNanosFieldNumber;
const int InternalTimeSeriesData::kSampleDurationNanosFieldNumber;
const int InternalTimeSeriesData::kSamplesFieldNumber;
#endif  // !_MSC_VER

InternalTimeSeriesData::InternalTimeSeriesData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTimeSeriesData)
}

void InternalTimeSeriesData::InitAsDefaultInstance() {
}

InternalTimeSeriesData::InternalTimeSeriesData(const InternalTimeSeriesData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTimeSeriesData)
}

void InternalTimeSeriesData::SharedCtor() {
  _cached_size_ = 0;
  start_timestamp_nanos_ = GOOGLE_LONGLONG(0);
  sample_duration_nanos_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTimeSeriesData::~InternalTimeSeriesData() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTimeSeriesData)
  SharedDtor();
}

void InternalTimeSeriesData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InternalTimeSeriesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTimeSeriesData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTimeSeriesData_descriptor_;
}

const InternalTimeSeriesData& InternalTimeSeriesData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTimeSeriesData* InternalTimeSeriesData::default_instance_ = NULL;

InternalTimeSeriesData* InternalTimeSeriesData::New(::google::protobuf::Arena* arena) const {
  InternalTimeSeriesData* n = new InternalTimeSeriesData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalTimeSeriesData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InternalTimeSeriesData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_timestamp_nanos_, sample_duration_nanos_);

#undef ZR_HELPER_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalTimeSeriesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTimeSeriesData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_timestamp_nanos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_nanos_)));
          set_has_start_timestamp_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sample_duration_nanos;
        break;
      }

      // optional int64 sample_duration_nanos = 2;
      case 2: {
        if (tag == 16) {
         parse_sample_duration_nanos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sample_duration_nanos_)));
          set_has_sample_duration_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_samples;
        break;
      }

      // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
      case 3: {
        if (tag == 26) {
         parse_samples:
          DO_(input->IncrementRecursionDepth());
         parse_loop_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_samples;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTimeSeriesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTimeSeriesData)
  return false;
#undef DO_
}

void InternalTimeSeriesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTimeSeriesData)
  // optional int64 start_timestamp_nanos = 1;
  if (has_start_timestamp_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_timestamp_nanos(), output);
  }

  // optional int64 sample_duration_nanos = 2;
  if (has_sample_duration_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sample_duration_nanos(), output);
  }

  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->samples(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTimeSeriesData)
}

::google::protobuf::uint8* InternalTimeSeriesData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTimeSeriesData)
  // optional int64 start_timestamp_nanos = 1;
  if (has_start_timestamp_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_timestamp_nanos(), target);
  }

  // optional int64 sample_duration_nanos = 2;
  if (has_sample_duration_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sample_duration_nanos(), target);
  }

  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->samples(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTimeSeriesData)
  return target;
}

int InternalTimeSeriesData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional int64 start_timestamp_nanos = 1;
    if (has_start_timestamp_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_timestamp_nanos());
    }

    // optional int64 sample_duration_nanos = 2;
    if (has_sample_duration_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sample_duration_nanos());
    }

  }
  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTimeSeriesData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalTimeSeriesData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalTimeSeriesData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTimeSeriesData::MergeFrom(const InternalTimeSeriesData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_timestamp_nanos()) {
      set_start_timestamp_nanos(from.start_timestamp_nanos());
    }
    if (from.has_sample_duration_nanos()) {
      set_sample_duration_nanos(from.sample_duration_nanos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalTimeSeriesData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTimeSeriesData::CopyFrom(const InternalTimeSeriesData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTimeSeriesData::IsInitialized() const {

  return true;
}

void InternalTimeSeriesData::Swap(InternalTimeSeriesData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalTimeSeriesData::InternalSwap(InternalTimeSeriesData* other) {
  std::swap(start_timestamp_nanos_, other->start_timestamp_nanos_);
  std::swap(sample_duration_nanos_, other->sample_duration_nanos_);
  samples_.UnsafeArenaSwap(&other->samples_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalTimeSeriesData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTimeSeriesData_descriptor_;
  metadata.reflection = InternalTimeSeriesData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalTimeSeriesData

// optional int64 start_timestamp_nanos = 1;
bool InternalTimeSeriesData::has_start_timestamp_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalTimeSeriesData::set_has_start_timestamp_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalTimeSeriesData::clear_has_start_timestamp_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalTimeSeriesData::clear_start_timestamp_nanos() {
  start_timestamp_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_start_timestamp_nanos();
}
 ::google::protobuf::int64 InternalTimeSeriesData::start_timestamp_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.start_timestamp_nanos)
  return start_timestamp_nanos_;
}
 void InternalTimeSeriesData::set_start_timestamp_nanos(::google::protobuf::int64 value) {
  set_has_start_timestamp_nanos();
  start_timestamp_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesData.start_timestamp_nanos)
}

// optional int64 sample_duration_nanos = 2;
bool InternalTimeSeriesData::has_sample_duration_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalTimeSeriesData::set_has_sample_duration_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalTimeSeriesData::clear_has_sample_duration_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalTimeSeriesData::clear_sample_duration_nanos() {
  sample_duration_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_sample_duration_nanos();
}
 ::google::protobuf::int64 InternalTimeSeriesData::sample_duration_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.sample_duration_nanos)
  return sample_duration_nanos_;
}
 void InternalTimeSeriesData::set_sample_duration_nanos(::google::protobuf::int64 value) {
  set_has_sample_duration_nanos();
  sample_duration_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesData.sample_duration_nanos)
}

// repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
int InternalTimeSeriesData::samples_size() const {
  return samples_.size();
}
void InternalTimeSeriesData::clear_samples() {
  samples_.Clear();
}
 const ::cockroach::proto::InternalTimeSeriesSample& InternalTimeSeriesData::samples(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Get(index);
}
 ::cockroach::proto::InternalTimeSeriesSample* InternalTimeSeriesData::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Mutable(index);
}
 ::cockroach::proto::InternalTimeSeriesSample* InternalTimeSeriesData::add_samples() {
  // @@protoc_insertion_point(field_add:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample >&
InternalTimeSeriesData::samples() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample >*
InternalTimeSeriesData::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.InternalTimeSeriesData.samples)
  return &samples_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalTimeSeriesSample::kOffsetFieldNumber;
const int InternalTimeSeriesSample::kCountFieldNumber;
const int InternalTimeSeriesSample::kSumFieldNumber;
const int InternalTimeSeriesSample::kMaxFieldNumber;
const int InternalTimeSeriesSample::kMinFieldNumber;
#endif  // !_MSC_VER

InternalTimeSeriesSample::InternalTimeSeriesSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTimeSeriesSample)
}

void InternalTimeSeriesSample::InitAsDefaultInstance() {
}

InternalTimeSeriesSample::InternalTimeSeriesSample(const InternalTimeSeriesSample& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTimeSeriesSample)
}

void InternalTimeSeriesSample::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  count_ = 0u;
  sum_ = 0;
  max_ = 0;
  min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTimeSeriesSample::~InternalTimeSeriesSample() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTimeSeriesSample)
  SharedDtor();
}

void InternalTimeSeriesSample::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InternalTimeSeriesSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTimeSeriesSample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTimeSeriesSample_descriptor_;
}

const InternalTimeSeriesSample& InternalTimeSeriesSample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTimeSeriesSample* InternalTimeSeriesSample::default_instance_ = NULL;

InternalTimeSeriesSample* InternalTimeSeriesSample::New(::google::protobuf::Arena* arena) const {
  InternalTimeSeriesSample* n = new InternalTimeSeriesSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalTimeSeriesSample::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InternalTimeSeriesSample*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(offset_, min_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalTimeSeriesSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTimeSeriesSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_sum;
        break;
      }

      // optional double sum = 7;
      case 7: {
        if (tag == 57) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_max;
        break;
      }

      // optional double max = 8;
      case 8: {
        if (tag == 65) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_min;
        break;
      }

      // optional double min = 9;
      case 9: {
        if (tag == 73) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTimeSeriesSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTimeSeriesSample)
  return false;
#undef DO_
}

void InternalTimeSeriesSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTimeSeriesSample)
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // optional double sum = 7;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sum(), output);
  }

  // optional double max = 8;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->max(), output);
  }

  // optional double min = 9;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->min(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTimeSeriesSample)
}

::google::protobuf::uint8* InternalTimeSeriesSample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTimeSeriesSample)
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // optional double sum = 7;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sum(), target);
  }

  // optional double max = 8;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->max(), target);
  }

  // optional double min = 9;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->min(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTimeSeriesSample)
  return target;
}

int InternalTimeSeriesSample::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional double sum = 7;
    if (has_sum()) {
      total_size += 1 + 8;
    }

    // optional double max = 8;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // optional double min = 9;
    if (has_min()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTimeSeriesSample::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalTimeSeriesSample* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalTimeSeriesSample>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTimeSeriesSample::MergeFrom(const InternalTimeSeriesSample& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalTimeSeriesSample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTimeSeriesSample::CopyFrom(const InternalTimeSeriesSample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTimeSeriesSample::IsInitialized() const {

  return true;
}

void InternalTimeSeriesSample::Swap(InternalTimeSeriesSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalTimeSeriesSample::InternalSwap(InternalTimeSeriesSample* other) {
  std::swap(offset_, other->offset_);
  std::swap(count_, other->count_);
  std::swap(sum_, other->sum_);
  std::swap(max_, other->max_);
  std::swap(min_, other->min_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalTimeSeriesSample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTimeSeriesSample_descriptor_;
  metadata.reflection = InternalTimeSeriesSample_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalTimeSeriesSample

// optional int32 offset = 1;
bool InternalTimeSeriesSample::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalTimeSeriesSample::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalTimeSeriesSample::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalTimeSeriesSample::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
 ::google::protobuf::int32 InternalTimeSeriesSample::offset() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.offset)
  return offset_;
}
 void InternalTimeSeriesSample::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.offset)
}

// optional uint32 count = 6;
bool InternalTimeSeriesSample::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalTimeSeriesSample::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalTimeSeriesSample::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalTimeSeriesSample::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 InternalTimeSeriesSample::count() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.count)
  return count_;
}
 void InternalTimeSeriesSample::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.count)
}

// optional double sum = 7;
bool InternalTimeSeriesSample::has_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InternalTimeSeriesSample::set_has_sum() {
  _has_bits_[0] |= 0x00000004u;
}
void InternalTimeSeriesSample::clear_has_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
void InternalTimeSeriesSample::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
 double InternalTimeSeriesSample::sum() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.sum)
  return sum_;
}
 void InternalTimeSeriesSample::set_sum(double value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.sum)
}

// optional double max = 8;
bool InternalTimeSeriesSample::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InternalTimeSeriesSample::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
void InternalTimeSeriesSample::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void InternalTimeSeriesSample::clear_max() {
  max_ = 0;
  clear_has_max();
}
 double InternalTimeSeriesSample::max() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.max)
  return max_;
}
 void InternalTimeSeriesSample::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.max)
}

// optional double min = 9;
bool InternalTimeSeriesSample::has_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InternalTimeSeriesSample::set_has_min() {
  _has_bits_[0] |= 0x00000010u;
}
void InternalTimeSeriesSample::clear_has_min() {
  _has_bits_[0] &= ~0x00000010u;
}
void InternalTimeSeriesSample::clear_min() {
  min_ = 0;
  clear_has_min();
}
 double InternalTimeSeriesSample::min() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.min)
  return min_;
}
 void InternalTimeSeriesSample::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.min)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RaftTruncatedState::kIndexFieldNumber;
const int RaftTruncatedState::kTermFieldNumber;
#endif  // !_MSC_VER

RaftTruncatedState::RaftTruncatedState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftTruncatedState)
}

void RaftTruncatedState::InitAsDefaultInstance() {
}

RaftTruncatedState::RaftTruncatedState(const RaftTruncatedState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftTruncatedState)
}

void RaftTruncatedState::SharedCtor() {
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftTruncatedState::~RaftTruncatedState() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftTruncatedState)
  SharedDtor();
}

void RaftTruncatedState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftTruncatedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftTruncatedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftTruncatedState_descriptor_;
}

const RaftTruncatedState& RaftTruncatedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftTruncatedState* RaftTruncatedState::default_instance_ = NULL;

RaftTruncatedState* RaftTruncatedState::New(::google::protobuf::Arena* arena) const {
  RaftTruncatedState* n = new RaftTruncatedState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftTruncatedState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftTruncatedState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, term_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftTruncatedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftTruncatedState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftTruncatedState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftTruncatedState)
  return false;
#undef DO_
}

void RaftTruncatedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftTruncatedState)
  // optional uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftTruncatedState)
}

::google::protobuf::uint8* RaftTruncatedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftTruncatedState)
  // optional uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftTruncatedState)
  return target;
}

int RaftTruncatedState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional uint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftTruncatedState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftTruncatedState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftTruncatedState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftTruncatedState::MergeFrom(const RaftTruncatedState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftTruncatedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftTruncatedState::CopyFrom(const RaftTruncatedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftTruncatedState::IsInitialized() const {

  return true;
}

void RaftTruncatedState::Swap(RaftTruncatedState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftTruncatedState::InternalSwap(RaftTruncatedState* other) {
  std::swap(index_, other->index_);
  std::swap(term_, other->term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftTruncatedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftTruncatedState_descriptor_;
  metadata.reflection = RaftTruncatedState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftTruncatedState

// optional uint64 index = 1;
bool RaftTruncatedState::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftTruncatedState::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftTruncatedState::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftTruncatedState::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
 ::google::protobuf::uint64 RaftTruncatedState::index() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftTruncatedState.index)
  return index_;
}
 void RaftTruncatedState::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftTruncatedState.index)
}

// optional uint64 term = 2;
bool RaftTruncatedState::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftTruncatedState::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftTruncatedState::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftTruncatedState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
 ::google::protobuf::uint64 RaftTruncatedState::term() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftTruncatedState.term)
  return term_;
}
 void RaftTruncatedState::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftTruncatedState.term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RaftSnapshotData_KeyValue::kKeyFieldNumber;
const int RaftSnapshotData_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

RaftSnapshotData_KeyValue::RaftSnapshotData_KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftSnapshotData.KeyValue)
}

void RaftSnapshotData_KeyValue::InitAsDefaultInstance() {
}

RaftSnapshotData_KeyValue::RaftSnapshotData_KeyValue(const RaftSnapshotData_KeyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftSnapshotData.KeyValue)
}

void RaftSnapshotData_KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftSnapshotData_KeyValue::~RaftSnapshotData_KeyValue() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftSnapshotData.KeyValue)
  SharedDtor();
}

void RaftSnapshotData_KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RaftSnapshotData_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftSnapshotData_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftSnapshotData_KeyValue_descriptor_;
}

const RaftSnapshotData_KeyValue& RaftSnapshotData_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftSnapshotData_KeyValue* RaftSnapshotData_KeyValue::default_instance_ = NULL;

RaftSnapshotData_KeyValue* RaftSnapshotData_KeyValue::New(::google::protobuf::Arena* arena) const {
  RaftSnapshotData_KeyValue* n = new RaftSnapshotData_KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftSnapshotData_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftSnapshotData_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftSnapshotData.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftSnapshotData.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftSnapshotData.KeyValue)
  return false;
#undef DO_
}

void RaftSnapshotData_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftSnapshotData.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftSnapshotData.KeyValue)
}

::google::protobuf::uint8* RaftSnapshotData_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftSnapshotData.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftSnapshotData.KeyValue)
  return target;
}

int RaftSnapshotData_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftSnapshotData_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftSnapshotData_KeyValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftSnapshotData_KeyValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftSnapshotData_KeyValue::MergeFrom(const RaftSnapshotData_KeyValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftSnapshotData_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftSnapshotData_KeyValue::CopyFrom(const RaftSnapshotData_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftSnapshotData_KeyValue::IsInitialized() const {

  return true;
}

void RaftSnapshotData_KeyValue::Swap(RaftSnapshotData_KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftSnapshotData_KeyValue::InternalSwap(RaftSnapshotData_KeyValue* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftSnapshotData_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftSnapshotData_KeyValue_descriptor_;
  metadata.reflection = RaftSnapshotData_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RaftSnapshotData::kRangeDescriptorFieldNumber;
const int RaftSnapshotData::kKVFieldNumber;
#endif  // !_MSC_VER

RaftSnapshotData::RaftSnapshotData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftSnapshotData)
}

void RaftSnapshotData::InitAsDefaultInstance() {
  range_descriptor_ = const_cast< ::cockroach::proto::RangeDescriptor*>(&::cockroach::proto::RangeDescriptor::default_instance());
}

RaftSnapshotData::RaftSnapshotData(const RaftSnapshotData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftSnapshotData)
}

void RaftSnapshotData::SharedCtor() {
  _cached_size_ = 0;
  range_descriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftSnapshotData::~RaftSnapshotData() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftSnapshotData)
  SharedDtor();
}

void RaftSnapshotData::SharedDtor() {
  if (this != default_instance_) {
    delete range_descriptor_;
  }
}

void RaftSnapshotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftSnapshotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftSnapshotData_descriptor_;
}

const RaftSnapshotData& RaftSnapshotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftSnapshotData* RaftSnapshotData::default_instance_ = NULL;

RaftSnapshotData* RaftSnapshotData::New(::google::protobuf::Arena* arena) const {
  RaftSnapshotData* n = new RaftSnapshotData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftSnapshotData::Clear() {
  if (has_range_descriptor()) {
    if (range_descriptor_ != NULL) range_descriptor_->::cockroach::proto::RangeDescriptor::Clear();
  }
  kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftSnapshotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftSnapshotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_descriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_KV;
        break;
      }

      // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
      case 2: {
        if (tag == 18) {
         parse_KV:
          DO_(input->IncrementRecursionDepth());
         parse_loop_KV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_KV;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftSnapshotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftSnapshotData)
  return false;
#undef DO_
}

void RaftSnapshotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftSnapshotData)
  // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
  if (has_range_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->range_descriptor_, output);
  }

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
  for (unsigned int i = 0, n = this->kv_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kv(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftSnapshotData)
}

::google::protobuf::uint8* RaftSnapshotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftSnapshotData)
  // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
  if (has_range_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->range_descriptor_, target);
  }

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
  for (unsigned int i = 0, n = this->kv_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kv(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftSnapshotData)
  return target;
}

int RaftSnapshotData::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
  if (has_range_descriptor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_descriptor_);
  }

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
  total_size += 1 * this->kv_size();
  for (int i = 0; i < this->kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kv(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftSnapshotData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftSnapshotData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftSnapshotData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftSnapshotData::MergeFrom(const RaftSnapshotData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  kv_.MergeFrom(from.kv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range_descriptor()) {
      mutable_range_descriptor()->::cockroach::proto::RangeDescriptor::MergeFrom(from.range_descriptor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftSnapshotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftSnapshotData::CopyFrom(const RaftSnapshotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftSnapshotData::IsInitialized() const {

  return true;
}

void RaftSnapshotData::Swap(RaftSnapshotData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftSnapshotData::InternalSwap(RaftSnapshotData* other) {
  std::swap(range_descriptor_, other->range_descriptor_);
  kv_.UnsafeArenaSwap(&other->kv_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftSnapshotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftSnapshotData_descriptor_;
  metadata.reflection = RaftSnapshotData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftSnapshotData_KeyValue

// optional bytes key = 1;
bool RaftSnapshotData_KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftSnapshotData_KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftSnapshotData_KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftSnapshotData_KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& RaftSnapshotData_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
 void RaftSnapshotData_KeyValue::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
 void RaftSnapshotData_KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
 ::std::string* RaftSnapshotData_KeyValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftSnapshotData_KeyValue::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.KeyValue.key)
}

// optional bytes value = 2;
bool RaftSnapshotData_KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftSnapshotData_KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftSnapshotData_KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftSnapshotData_KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& RaftSnapshotData_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KeyValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
 void RaftSnapshotData_KeyValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
 void RaftSnapshotData_KeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
 ::std::string* RaftSnapshotData_KeyValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftSnapshotData_KeyValue::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.KeyValue.value)
}

// -------------------------------------------------------------------

// RaftSnapshotData

// optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
bool RaftSnapshotData::has_range_descriptor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftSnapshotData::set_has_range_descriptor() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftSnapshotData::clear_has_range_descriptor() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftSnapshotData::clear_range_descriptor() {
  if (range_descriptor_ != NULL) range_descriptor_->::cockroach::proto::RangeDescriptor::Clear();
  clear_has_range_descriptor();
}
 const ::cockroach::proto::RangeDescriptor& RaftSnapshotData::range_descriptor() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.range_descriptor)
  return range_descriptor_ != NULL ? *range_descriptor_ : *default_instance_->range_descriptor_;
}
 ::cockroach::proto::RangeDescriptor* RaftSnapshotData::mutable_range_descriptor() {
  set_has_range_descriptor();
  if (range_descriptor_ == NULL) {
    range_descriptor_ = new ::cockroach::proto::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.range_descriptor)
  return range_descriptor_;
}
 ::cockroach::proto::RangeDescriptor* RaftSnapshotData::release_range_descriptor() {
  clear_has_range_descriptor();
  ::cockroach::proto::RangeDescriptor* temp = range_descriptor_;
  range_descriptor_ = NULL;
  return temp;
}
 void RaftSnapshotData::set_allocated_range_descriptor(::cockroach::proto::RangeDescriptor* range_descriptor) {
  delete range_descriptor_;
  range_descriptor_ = range_descriptor;
  if (range_descriptor) {
    set_has_range_descriptor();
  } else {
    clear_has_range_descriptor();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.range_descriptor)
}

// repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
int RaftSnapshotData::kv_size() const {
  return kv_.size();
}
void RaftSnapshotData::clear_kv() {
  kv_.Clear();
}
 const ::cockroach::proto::RaftSnapshotData_KeyValue& RaftSnapshotData::kv(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Get(index);
}
 ::cockroach::proto::RaftSnapshotData_KeyValue* RaftSnapshotData::mutable_kv(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Mutable(index);
}
 ::cockroach::proto::RaftSnapshotData_KeyValue* RaftSnapshotData::add_kv() {
  // @@protoc_insertion_point(field_add:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue >&
RaftSnapshotData::kv() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.RaftSnapshotData.KV)
  return kv_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue >*
RaftSnapshotData::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.RaftSnapshotData.KV)
  return &kv_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
